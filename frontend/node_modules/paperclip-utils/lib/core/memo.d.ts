export declare const memoize: <TFunc extends (...args: any[]) => any>(fn: TFunc, lruMax?: number, argumentCount?: number) => TFunc;
export declare const shallowEquals: (a: any, b: any) => boolean;
export declare const reuser: <TValue>(lruMax: number, getKey: (value: TValue) => string, equals?: (a: TValue, b: TValue) => boolean) => (value: TValue) => TValue;
/**
 * Calls target function once & proxies passed functions
 * @param fn
 */
export declare const underchange: <TFunc extends (...args: any[]) => any>(fn: TFunc) => TFunc;
