"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOutputFile = exports.buildCompilerOptions = exports.getPaperclipConfigIncludes = void 0;
var path = require("path");
var utils_1 = require("./utils");
var getPaperclipConfigIncludes = function (config, cwd) {
    if (config.srcDir) {
        return [(0, utils_1.paperclipSourceGlobPattern)(path.join(cwd, config.srcDir))];
    }
    // if (config.include) {
    //   return config.include.map(inc => path.join(cwd, inc));
    // }
    return [path.join((0, utils_1.paperclipSourceGlobPattern)(cwd))];
};
exports.getPaperclipConfigIncludes = getPaperclipConfigIncludes;
/**
 */
var buildCompilerOptions = function (config) {
    return buildCompilerOptionsFromTemplates(config, config.compilerOptions);
};
exports.buildCompilerOptions = buildCompilerOptions;
/**
 */
var buildCompilerOptionsFromTemplates = function (config, templates) {
    if (!templates) {
        return [{ outDir: config.srcDir }];
    }
    if (!Array.isArray(templates)) {
        templates = Array.isArray(templates) ? templates : [templates];
    }
    // const base = templates.find(template => !Array.isArray(template) && template.base) as CompilerOptionsTemplate;
    return templates.reduce(function (allCompilerOptions, template) {
        var compilerOptions = template;
        allCompilerOptions.push(__assign({ outDir: config.srcDir }, compilerOptions));
        return allCompilerOptions;
    }, []);
};
/**
 */
var getOutputFile = function (filePath, config, compilerOptions, cwd) {
    return (compilerOptions === null || compilerOptions === void 0 ? void 0 : compilerOptions.outDir)
        ? filePath.replace(path.join(cwd, config.srcDir), path.join(cwd, compilerOptions.outDir))
        : filePath;
};
exports.getOutputFile = getOutputFile;
