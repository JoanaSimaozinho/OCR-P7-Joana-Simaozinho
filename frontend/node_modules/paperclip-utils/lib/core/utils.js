"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getScopedCSSFilePath = exports.isCSSFile = exports.isPaperclipResourceFile = exports.isPaperclipFile = exports.isGeneratedPaperclipFile = exports.paperclipResourceGlobPattern = exports.paperclipSourceGlobPattern = exports.stripFileProtocol = void 0;
var url = require("url");
var stripFileProtocol = function (filePath) {
    return filePath.includes("file://") ? url.fileURLToPath(filePath) : filePath;
};
exports.stripFileProtocol = stripFileProtocol;
var paperclipSourceGlobPattern = function (dir) {
    return dir === "." ? "**/*.pc" : dir + "/**/*.pc";
};
exports.paperclipSourceGlobPattern = paperclipSourceGlobPattern;
// TODO: we want to watch for CSS files here, but need to be
// cognizant of generated CSS files which may clobber the PC engine. THe fix here
// I think is to load GLOB data, _as well as_ resources loaded into the PC file.
var paperclipResourceGlobPattern = function (dir) {
    return dir === "." ? "**/*.{pc}" : dir + "/**/*.{pc}";
};
exports.paperclipResourceGlobPattern = paperclipResourceGlobPattern;
var isGeneratedPaperclipFile = function (filePath) {
    return /\.(pc(.\w+)+|scoped.css)$/.test(filePath);
};
exports.isGeneratedPaperclipFile = isGeneratedPaperclipFile;
var isPaperclipFile = function (filePath) { return /\.pc$/.test(filePath); };
exports.isPaperclipFile = isPaperclipFile;
var isPaperclipResourceFile = function (filePath) {
    return ((0, exports.isCSSFile)(filePath) || (0, exports.isPaperclipFile)(filePath)) &&
        !(0, exports.isGeneratedPaperclipFile)(filePath);
};
exports.isPaperclipResourceFile = isPaperclipResourceFile;
var isCSSFile = function (filePath) { return /\.css$/.test(filePath); };
exports.isCSSFile = isCSSFile;
var getScopedCSSFilePath = function (filePath) {
    return filePath.replace(/\.css$/, ".scoped.css");
};
exports.getScopedCSSFilePath = getScopedCSSFilePath;
