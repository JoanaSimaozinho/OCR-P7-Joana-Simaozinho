import { StringRange } from "../base/ast";
export declare enum ParseErrorKind {
    EndOfFile = "EndOfFile",
    Unknown = "Unknown",
    Unexpected = "Unexpected",
    Unterminated = "Unterminated"
}
export declare type ParseError = {
    kind: ParseErrorKind;
    message: string;
    range: StringRange;
};
export declare enum GraphErrorInfoKind {
    IncludeNotFound = "IncludeNotFound",
    Syntax = "Syntax"
}
export declare type BaseGraphErrorInfo<TKind extends GraphErrorInfoKind> = {
    kind: TKind;
};
export declare type IncludeNotFoundErrorInfo = {
    uri: string;
    range: StringRange;
    message: string;
} & BaseGraphErrorInfo<GraphErrorInfoKind.IncludeNotFound>;
export declare type SyntaxErrorInfo = ParseError & BaseGraphErrorInfo<GraphErrorInfoKind.Syntax>;
export declare type GraphErrorInfo = IncludeNotFoundErrorInfo | SyntaxErrorInfo;
export declare type GraphError = {
    uri: string;
    info: GraphErrorInfo;
};
export declare type RuntimeError = {
    uri: string;
    range: StringRange;
    message: string;
};
export declare enum EngineErrorKind {
    Graph = "Graph",
    Runtime = "Runtime"
}
export declare type BaseEngineError<TKind = EngineErrorKind> = {
    errorKind: TKind;
};
export declare type RuntimeEngineError = RuntimeError & BaseEngineError<EngineErrorKind.Runtime>;
export declare type GraphEngineError = GraphError & BaseEngineError<EngineErrorKind.Graph>;
export declare type EngineError = RuntimeEngineError | GraphEngineError;
