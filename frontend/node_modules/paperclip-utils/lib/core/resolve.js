"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findPCConfigUrl = exports.resolvePCConfig = exports.resolveImportFile = exports.resolveImportUri = void 0;
var path = require("path");
var url = require("url");
var utils_1 = require("./utils");
var constants_1 = require("./constants");
var resolveImportUri = function (fs) { return function (fromPath, toPath) {
    var filePath = (0, exports.resolveImportFile)(fs)(fromPath, toPath);
    return filePath;
}; };
exports.resolveImportUri = resolveImportUri;
var resolveImportFile = function (fs) { return function (fromPath, toPath) {
    try {
        if (/\w+:\/\//.test(toPath)) {
            return toPath;
        }
        if (toPath.charAt(0) !== ".") {
            var uri_1 = resolveModule(fs)(fromPath, toPath);
            if (!uri_1) {
                throw new Error("module ".concat(toPath, " not found"));
            }
            return uri_1;
        }
        var uri = url.resolve(fromPath, toPath);
        // always want realpath here since file name is used as ID for PC files - need
        // to make sure that we're not doubling up on the same files.
        try {
            return url.pathToFileURL(fs.realpathSync(url.fileURLToPath(uri))).href;
        }
        catch (e) {
            return uri;
        }
    }
    catch (e) {
        return null;
    }
}; };
exports.resolveImportFile = resolveImportFile;
var readJSONSync = function (fs) { return function (uri) {
    return JSON.parse(fs.readFileSync(uri, "utf8"));
}; };
var resolvePCConfig = function (fs) { return function (fromPath) {
    var configUrl = (0, exports.findPCConfigUrl)(fs)(fromPath);
    if (!configUrl)
        return null;
    var uri = new URL(configUrl);
    // need to parse each time in case config changed.
    return [readJSONSync(fs)(uri), configUrl];
}; };
exports.resolvePCConfig = resolvePCConfig;
var resolveModule = function (fs) { return function (fromPath, moduleRelativePath) {
    // need to parse each time in case config changed.
    var _a = (0, exports.resolvePCConfig)(fs)(fromPath) || [], config = _a[0], configUrl = _a[1];
    if (!config) {
        return null;
    }
    var configPathDir = path.dirname((0, utils_1.stripFileProtocol)(configUrl));
    var moduleFileUrl = url.pathToFileURL(path.normalize(path.join(configPathDir, config.srcDir, moduleRelativePath)));
    // FIRST look for modules in the sourceDirectory
    if (fs.existsSync(moduleFileUrl)) {
        // Need to follow symlinks
        return url.pathToFileURL(fs.realpathSync(moduleFileUrl)).href;
    }
    // No bueno? Move onto the module directories then
    if (config.moduleDirs) {
        var firstSlashIndex = moduleRelativePath.indexOf("/");
        var moduleName = moduleRelativePath.substr(0, firstSlashIndex);
        var srcPath = moduleRelativePath.substr(firstSlashIndex);
        for (var i = 0, length_1 = config.moduleDirs.length; i < length_1; i++) {
            var moduleDir = config.moduleDirs[i];
            var moduleDirectory = path.join(resolveModuleDirectory(fs)(configPathDir, moduleDir), moduleName);
            var modulePath = path.join(moduleDirectory, srcPath);
            if (fs.existsSync(modulePath)) {
                var actualPath = fs.realpathSync(modulePath);
                return url.pathToFileURL(actualPath).href;
            }
        }
    }
    return null;
}; };
var resolveModuleDirectory = function (fs) { return function (cwd, moduleDir) {
    var c0 = moduleDir.charAt(0);
    if (c0 === "/" || c0 === ".") {
        return path.join(cwd, moduleDir);
    }
    var cdir = cwd;
    do {
        var maybeDir = path.join(cdir, moduleDir);
        if (fs.existsSync(maybeDir)) {
            return maybeDir;
        }
        cdir = path.dirname(cdir);
    } while (isntRoot(cdir));
}; };
var findPCConfigUrl = function (fs) { return function (fromUri) {
    var cdir = (0, utils_1.stripFileProtocol)(fromUri);
    // can't cache in case PC config was moved.
    do {
        var configUrl = url.pathToFileURL(path.join(cdir, constants_1.PC_CONFIG_FILE_NAME));
        if (fs.existsSync(configUrl)) {
            return configUrl.href;
        }
        cdir = path.dirname(cdir);
    } while (isntRoot(cdir));
    return null;
}; };
exports.findPCConfigUrl = findPCConfigUrl;
var isntRoot = function (cdir) {
    return cdir !== "/" && cdir !== "." && !/^\w+:\\$/.test(cdir);
};
