"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeVirtScriptValue = exports.toVirtScriptValue = exports.computeVirtScriptObject = exports.VirtScriptObjectKind = void 0;
var memo_1 = require("../core/memo");
var VirtScriptObjectKind;
(function (VirtScriptObjectKind) {
    VirtScriptObjectKind["Object"] = "Object";
    VirtScriptObjectKind["Array"] = "Array";
    VirtScriptObjectKind["Boolean"] = "Boolean";
    VirtScriptObjectKind["Number"] = "Number";
    VirtScriptObjectKind["Str"] = "Str";
})(VirtScriptObjectKind = exports.VirtScriptObjectKind || (exports.VirtScriptObjectKind = {}));
exports.computeVirtScriptObject = (0, memo_1.memoize)(function (obj) {
    var values = {};
    for (var key in obj.values) {
        values[key] = (0, exports.computeVirtScriptValue)(obj.values[key]);
    }
    return values;
});
exports.toVirtScriptValue = (0, memo_1.memoize)(function (value) {
    if (Array.isArray(value)) {
        return {
            kind: VirtScriptObjectKind.Array,
            values: value.map(exports.toVirtScriptValue)
        };
    }
    else if (value && typeof value === "object") {
        var values = {};
        for (var k in value) {
            values[k] = (0, exports.toVirtScriptValue)(value[k]);
        }
        return {
            kind: VirtScriptObjectKind.Object,
            values: values
        };
    }
    else if (typeof value === "number") {
        return {
            kind: VirtScriptObjectKind.Number,
            value: value
        };
    }
    else if (typeof value === "string") {
        return {
            kind: VirtScriptObjectKind.Str,
            value: value
        };
    }
    else if (typeof value === "boolean") {
        return {
            kind: VirtScriptObjectKind.Boolean,
            value: value
        };
    }
});
exports.computeVirtScriptValue = (0, memo_1.memoize)(function (obj) {
    switch (obj.kind) {
        case VirtScriptObjectKind.Object: {
            return (0, exports.computeVirtScriptObject)(obj);
        }
        case VirtScriptObjectKind.Array: {
            return obj.values.map(exports.computeVirtScriptValue);
        }
        case VirtScriptObjectKind.Str:
        case VirtScriptObjectKind.Boolean:
        case VirtScriptObjectKind.Number: {
            return obj.value;
        }
    }
});
