export declare type BaseTreeNode = {};
export declare type BaseParentNode = {
    children: BaseTreeNode[];
} & BaseTreeNode;
export declare const isNodeParent: (node: BaseTreeNode) => node is {
    children: BaseTreeNode[];
};
export declare const flattenTreeNode: <TNode extends BaseTreeNode>(current: TNode) => TNode[];
export declare const getNodePath: <TNode extends BaseTreeNode>(node: TNode, root: TNode) => string;
export declare const getNodeByPath: <TNode extends BaseTreeNode>(nodePath: string, root: TNode) => TNode;
export declare const getNodeAncestors: <TNode extends BaseTreeNode>(nodePath: string, root: TNode) => any[];
export declare const containsNode: <TNode extends BaseTreeNode>(node: TNode, root: TNode) => boolean;
export declare const getTreeNodeMap: <TNode extends BaseTreeNode>(current: TNode, path?: string) => Record<string, TNode>;
