import { VirtScriptObject } from "../script/virt";
import { VirtualElementSourceInfo, VirtualNode } from "./virt";
export declare enum ActionKind {
    ReplaceNode = "ReplaceNode",
    InsertChild = "InsertChild",
    DeleteChild = "DeleteChild",
    SetAttribute = "SetAttribute",
    SetElementSourceInfo = "SetElementSourceInfo",
    SetAnnotations = "SetAnnotations",
    SourceUriChanged = "SourceUriChanged",
    SetText = "SetText",
    RemoveAttribute = "RemoveAttribute"
}
export declare type BaseAction<TKind extends ActionKind> = {
    kind: TKind;
};
export declare type ReplaceNode = {
    replacement: VirtualNode;
} & BaseAction<ActionKind.ReplaceNode>;
export declare type InsertChild = {
    child: VirtualNode;
    index: number;
} & BaseAction<ActionKind.InsertChild>;
export declare type DeleteChild = {
    index: number;
} & BaseAction<ActionKind.DeleteChild>;
export declare type SetAttribute = {
    name: string;
    value?: string;
} & BaseAction<ActionKind.SetAttribute>;
export declare type SetElementSourceInfo = {
    value: VirtualElementSourceInfo;
} & BaseAction<ActionKind.SetElementSourceInfo>;
export declare type SetAnnotations = {
    value?: VirtScriptObject;
} & BaseAction<ActionKind.SetAnnotations>;
export declare type RemoveAttribute = {
    name: string;
} & BaseAction<ActionKind.RemoveAttribute>;
export declare type SetText = {
    value: string;
} & BaseAction<ActionKind.SetText>;
export declare type Action = ReplaceNode | InsertChild | DeleteChild | SetElementSourceInfo | SetAttribute | SetAnnotations | SetText | RemoveAttribute;
export declare type Mutation = {
    nodePath: number[];
    action: Action;
};
