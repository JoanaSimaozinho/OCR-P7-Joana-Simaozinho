"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTreeNodeMap = exports.containsNode = exports.getNodeAncestors = exports.getNodeByPath = exports.getNodePath = exports.flattenTreeNode = exports.isNodeParent = void 0;
var memo_1 = require("../core/memo");
var virt_1 = require("./virt");
var isNodeParent = function (node) {
    return node.children != null;
};
exports.isNodeParent = isNodeParent;
exports.flattenTreeNode = (0, memo_1.memoize)(function (current) {
    var treeNodeMap = (0, exports.getTreeNodeMap)(current);
    return Object.values(treeNodeMap);
});
exports.getNodePath = (0, memo_1.memoize)(function (node, root) {
    var map = (0, exports.getTreeNodeMap)(root);
    for (var path in map) {
        var c = map[path];
        if (c === node)
            return path;
    }
});
exports.getNodeByPath = (0, memo_1.memoize)(function (nodePath, root) {
    return (0, exports.getTreeNodeMap)(root)[nodePath];
});
exports.getNodeAncestors = (0, memo_1.memoize)(function (nodePath, root) {
    var pathAry = (0, virt_1.nodePathToAry)(nodePath);
    var map = (0, exports.getTreeNodeMap)(root);
    var ancestors = [];
    for (var i = pathAry.length; i--;) {
        ancestors.push((0, exports.getNodeByPath)(pathAry.slice(0, i).join("."), root));
    }
    return ancestors;
});
var containsNode = function (node, root) { return (0, exports.getNodePath)(node, root) != null; };
exports.containsNode = containsNode;
exports.getTreeNodeMap = (0, memo_1.memoize)(function (current, path) {
    var _a;
    if (path === void 0) { path = ""; }
    var map = (_a = {},
        _a[path] = current,
        _a);
    if ((0, exports.isNodeParent)(current)) {
        Object.assign.apply(Object, __spreadArray([map], current.children.map(function (child, i) {
            return (0, exports.getTreeNodeMap)(child, path ? path + "." + i : String(i));
        }), false));
    }
    return map;
});
