"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNestedReferences = exports.traverseExpression = exports.isDynamicStringAttributeValuePart = exports.isScriptExpression = exports.isAttributeValue = exports.isAttribute = exports.isNode = exports.getMixins = exports.isComponentInstance = exports.getNodeById = exports.getPCNodeAnnotations = exports.getParentNode = exports.hasAttribute = exports.getLogicElement = exports.getDefaultPart = exports.getPartIds = exports.getParts = exports.isImport = exports.isComponent = exports.getVisibleChildNodes = exports.isVisibleNode = exports.isVisibleElement = exports.getStyleElements = exports.getAttributeStringValue = exports.getAttributeValue = exports.getAttribute = exports.getMetaValue = exports.findByNamespace = exports.getChildrenByTagName = exports.getStyleScopeId = exports.getChildren = exports.getImportBySrc = exports.getImportById = exports.getImportIds = exports.getRelativeFilePath = exports.getImports = exports.DynamicStringAttributeValuePartKind = exports.AttributeValueKind = exports.AttributeKind = exports.AnnotationPropertyKind = exports.NodeKind = void 0;
var ast_1 = require("../script/ast");
var ast_2 = require("../css/ast");
var tree_1 = require("./tree");
var crc32 = require("crc32");
var resolve_1 = require("../core/resolve");
var path = require("path");
var constants_1 = require("../core/constants");
var memo_1 = require("../core/memo");
var NodeKind;
(function (NodeKind) {
    NodeKind["Fragment"] = "Fragment";
    NodeKind["Text"] = "Text";
    NodeKind["Annotation"] = "Annotation";
    NodeKind["Comment"] = "Comment";
    NodeKind["Element"] = "Element";
    NodeKind["StyleElement"] = "StyleElement";
    NodeKind["Slot"] = "Slot";
})(NodeKind = exports.NodeKind || (exports.NodeKind = {}));
var AnnotationPropertyKind;
(function (AnnotationPropertyKind) {
    AnnotationPropertyKind["Text"] = "Text";
    AnnotationPropertyKind["Declaration"] = "Declaration";
})(AnnotationPropertyKind = exports.AnnotationPropertyKind || (exports.AnnotationPropertyKind = {}));
var AttributeKind;
(function (AttributeKind) {
    AttributeKind["ShorthandAttribute"] = "ShorthandAttribute";
    AttributeKind["KeyValueAttribute"] = "KeyValueAttribute";
    AttributeKind["SpreadAttribute"] = "SpreadAttribute";
    AttributeKind["PropertyBoundAttribute"] = "PropertyBoundAttribute";
})(AttributeKind = exports.AttributeKind || (exports.AttributeKind = {}));
var AttributeValueKind;
(function (AttributeValueKind) {
    AttributeValueKind["DyanmicString"] = "DyanmicString";
    AttributeValueKind["String"] = "String";
    AttributeValueKind["Slot"] = "Slot";
})(AttributeValueKind = exports.AttributeValueKind || (exports.AttributeValueKind = {}));
var DynamicStringAttributeValuePartKind;
(function (DynamicStringAttributeValuePartKind) {
    DynamicStringAttributeValuePartKind["Literal"] = "Literal";
    DynamicStringAttributeValuePartKind["ClassNamePierce"] = "ClassNamePierce";
    DynamicStringAttributeValuePartKind["Slot"] = "Slot";
})(DynamicStringAttributeValuePartKind = exports.DynamicStringAttributeValuePartKind || (exports.DynamicStringAttributeValuePartKind = {}));
var a = null;
var getImports = function (ast) {
    return (0, exports.getChildrenByTagName)("import", ast).filter(function (child) {
        return (0, exports.hasAttribute)("src", child);
    });
};
exports.getImports = getImports;
var getRelativeFilePath = function (fs) { return function (fromFilePath, importFilePath) {
    var logicPath = (0, resolve_1.resolveImportFile)(fs)(fromFilePath, importFilePath);
    var relativePath = path.relative(path.dirname(fromFilePath), logicPath);
    if (relativePath.charAt(0) !== ".") {
        relativePath = "./".concat(relativePath);
    }
    return relativePath;
}; };
exports.getRelativeFilePath = getRelativeFilePath;
var getImportIds = function (ast) {
    return (0, exports.getImports)(ast)
        .map(function (node) { return (0, exports.getAttributeStringValue)(constants_1.AS_ATTR_NAME, node); })
        .filter(Boolean);
};
exports.getImportIds = getImportIds;
var getImportById = function (id, ast) {
    return (0, exports.getImports)(ast).find(function (imp) {
        return (0, exports.getAttributeStringValue)(constants_1.AS_ATTR_NAME, imp) === id;
    });
};
exports.getImportById = getImportById;
var getImportBySrc = function (src, ast) {
    return (0, exports.getImports)(ast).find(function (imp) {
        return (0, exports.getAttributeStringValue)("src", imp) === src;
    });
};
exports.getImportBySrc = getImportBySrc;
var getChildren = function (ast) {
    if (ast.nodeKind === NodeKind.Element || ast.nodeKind === NodeKind.Fragment) {
        return ast.children;
    }
    return [];
};
exports.getChildren = getChildren;
var getStyleScopeId = function (filePath) {
    if (filePath.indexOf("file://") !== 0) {
        filePath = "file://" + filePath;
    }
    return crc32(filePath);
};
exports.getStyleScopeId = getStyleScopeId;
var getChildrenByTagName = function (tagName, parent) {
    return (0, exports.getChildren)(parent).filter(function (child) {
        return child.nodeKind === NodeKind.Element && child.tagName === tagName;
    });
};
exports.getChildrenByTagName = getChildrenByTagName;
var findByNamespace = function (namespace, current, allChildrenByNamespace) {
    if (allChildrenByNamespace === void 0) { allChildrenByNamespace = []; }
    if ((0, exports.isNode)(current)) {
        if (current.nodeKind === NodeKind.Element) {
            if (current.tagName.split(".")[0] === namespace) {
                allChildrenByNamespace.push(current);
            }
        }
        for (var _i = 0, _a = (0, exports.getChildren)(current); _i < _a.length; _i++) {
            var child = _a[_i];
            (0, exports.findByNamespace)(namespace, child, allChildrenByNamespace);
        }
        if (current.nodeKind === NodeKind.Element) {
            for (var _b = 0, _c = current.attributes; _b < _c.length; _b++) {
                var attribute = _c[_b];
                if (attribute.attrKind === AttributeKind.KeyValueAttribute &&
                    attribute.value) {
                    if (attribute.value.attrValueKind === AttributeValueKind.Slot &&
                        attribute.value.script.scriptKind === ast_1.ScriptExpressionKind.Node) {
                        (0, exports.findByNamespace)(namespace, attribute.value.script, allChildrenByNamespace);
                    }
                }
            }
        }
        if (current.nodeKind === NodeKind.Slot) {
            (0, exports.findByNamespace)(namespace, current.script, allChildrenByNamespace);
        }
    }
    else if ((0, exports.isScriptExpression)(current)) {
        if (current.scriptKind === ast_1.ScriptExpressionKind.Conjunction) {
            (0, exports.findByNamespace)(namespace, current.left, allChildrenByNamespace);
            (0, exports.findByNamespace)(namespace, current.right, allChildrenByNamespace);
        }
    }
    return allChildrenByNamespace;
};
exports.findByNamespace = findByNamespace;
var getMetaValue = function (name, root) {
    var metaElement = (0, exports.getChildrenByTagName)("meta", root).find(function (meta) {
        return (0, exports.hasAttribute)("src", meta) &&
            (0, exports.getAttributeStringValue)("name", meta) === name;
    });
    return metaElement && (0, exports.getAttributeStringValue)("content", metaElement);
};
exports.getMetaValue = getMetaValue;
var getAttribute = function (name, element) {
    return element.attributes.find(function (attr) {
        return (attr.attrKind === AttributeKind.KeyValueAttribute && attr.name === name);
    });
};
exports.getAttribute = getAttribute;
var getAttributeValue = function (name, element) {
    var attr = (0, exports.getAttribute)(name, element);
    return attr && attr.value;
};
exports.getAttributeValue = getAttributeValue;
var getAttributeStringValue = function (name, element) {
    var value = (0, exports.getAttributeValue)(name, element);
    return (value && value.attrValueKind === AttributeValueKind.String && value.value);
};
exports.getAttributeStringValue = getAttributeStringValue;
var getStyleElements = function (ast) {
    var styleElements = [];
    (0, exports.traverseExpression)(ast, function (node) {
        if (node.nodeKind === NodeKind.StyleElement) {
            styleElements.push(node);
        }
    });
    return styleElements;
};
exports.getStyleElements = getStyleElements;
var isVisibleElement = function (ast) {
    return !/^(import|logic|meta|style|part|preview)$/.test(ast.tagName);
};
exports.isVisibleElement = isVisibleElement;
var isVisibleNode = function (node) {
    return node.nodeKind === NodeKind.Text ||
        node.nodeKind === NodeKind.Fragment ||
        node.nodeKind === NodeKind.Slot ||
        (node.nodeKind === NodeKind.Element && (0, exports.isVisibleElement)(node));
};
exports.isVisibleNode = isVisibleNode;
var getVisibleChildNodes = function (ast) {
    return (0, exports.getChildren)(ast).filter(exports.isVisibleNode);
};
exports.getVisibleChildNodes = getVisibleChildNodes;
var isComponent = function (node) {
    return node.nodeKind === NodeKind.Element &&
        (0, exports.hasAttribute)("component", node) &&
        (0, exports.hasAttribute)(constants_1.AS_ATTR_NAME, node);
};
exports.isComponent = isComponent;
var isImport = function (node) {
    return node.nodeKind === NodeKind.Element &&
        node.tagName === "import" &&
        (0, exports.hasAttribute)("src", node);
};
exports.isImport = isImport;
var getParts = function (ast) {
    return (0, exports.getChildren)(ast).filter(exports.isComponent);
};
exports.getParts = getParts;
var getPartIds = function (ast) {
    return (0, exports.getParts)(ast)
        .map(function (node) { return (0, exports.getAttributeStringValue)(constants_1.AS_ATTR_NAME, node); })
        .filter(Boolean);
};
exports.getPartIds = getPartIds;
var getDefaultPart = function (ast) {
    return (0, exports.getParts)(ast).find(function (part) { return (0, exports.getAttributeStringValue)(constants_1.AS_ATTR_NAME, part) === constants_1.DEFAULT_PART_ID; });
};
exports.getDefaultPart = getDefaultPart;
var getLogicElement = function (ast) {
    return (0, exports.getChildren)(ast).find(function (child) {
        return child.nodeKind === NodeKind.Element && child.tagName === constants_1.LOGIC_TAG_NAME;
    });
};
exports.getLogicElement = getLogicElement;
var hasAttribute = function (name, element) {
    return (0, exports.getAttribute)(name, element) != null;
};
exports.hasAttribute = hasAttribute;
// https://github.com/crcn/tandem/blob/10.0.0/packages/common/src/state/tree.ts#L137
// TODO
var getParentNode = function (node, root) {
    var nodePath = (0, tree_1.getNodePath)(node, root).split(".");
    nodePath.pop();
    var map = (0, tree_1.getTreeNodeMap)(root);
    return map[nodePath.join(".")];
};
exports.getParentNode = getParentNode;
var getPCNodeAnnotations = function (node, root) {
    var parent = (0, exports.getParentNode)(node, root);
    var prevChild = parent.children[parent.children.indexOf(node) - 1];
    if ((prevChild === null || prevChild === void 0 ? void 0 : prevChild.nodeKind) === NodeKind.Comment) {
        return prevChild;
    }
    return null;
};
exports.getPCNodeAnnotations = getPCNodeAnnotations;
exports.getNodeById = (0, memo_1.memoize)(function (nodeId, root) {
    return (0, tree_1.flattenTreeNode)(root).find(function (desc) { return desc.id === nodeId; });
});
var isComponentInstance = function (node, importIds) {
    return (node.nodeKind === NodeKind.Element &&
        importIds.indexOf(node.tagName.split(".").shift()) !== -1);
};
exports.isComponentInstance = isComponentInstance;
var maybeAddReference = function (stmt, _statements) {
    if (_statements === void 0) { _statements = []; }
    if (stmt.scriptKind === ast_1.ScriptExpressionKind.Reference) {
        _statements.push([stmt, null]);
    }
};
var getMixins = function (ast) {
    var styles = (0, exports.getStyleElements)(ast);
    var mixins = {};
    for (var _i = 0, styles_1 = styles; _i < styles_1.length; _i++) {
        var style = styles_1[_i];
        (0, ast_2.traverseSheet)(style.sheet, function (rule) {
            if (rule && (0, ast_2.isRule)(rule) && rule.ruleKind === ast_2.RuleKind.Mixin) {
                mixins[rule.name.value] = rule;
            }
        });
    }
    return mixins;
};
exports.getMixins = getMixins;
var isNode = function (ast) {
    return NodeKind[ast.nodeKind] != null;
};
exports.isNode = isNode;
var isAttribute = function (ast) {
    return AttributeKind[ast.attrKind] != null;
};
exports.isAttribute = isAttribute;
var isAttributeValue = function (ast) {
    return AttributeValueKind[ast.attrValueKind] != null;
};
exports.isAttributeValue = isAttributeValue;
var isScriptExpression = function (ast) {
    return ast_1.ScriptExpressionKind[ast.scriptKind] != null;
};
exports.isScriptExpression = isScriptExpression;
var isDynamicStringAttributeValuePart = function (ast) {
    return DynamicStringAttributeValuePartKind[ast.partKind] != null;
};
exports.isDynamicStringAttributeValuePart = isDynamicStringAttributeValuePart;
var traverseExpression = function (ast, each) {
    if (each(ast) === false) {
        return false;
    }
    if ((0, exports.isNode)(ast)) {
        switch (ast.nodeKind) {
            case NodeKind.Element: {
                return (traverseExpressions(ast.attributes, each) &&
                    traverseExpressions(ast.children, each));
            }
            case NodeKind.Fragment: {
                return traverseExpressions(ast.children, each);
            }
            case NodeKind.Slot: {
                return (0, ast_1.traverseJSExpression)(ast.script, each);
            }
            case NodeKind.StyleElement: {
                return (0, ast_2.traverseSheet)(ast.sheet, each);
            }
        }
    }
    else if ((0, exports.isAttribute)(ast)) {
        if (ast.attrKind === AttributeKind.KeyValueAttribute && ast.value) {
            return (0, exports.traverseExpression)(ast.value, each);
        }
    }
    else if ((0, exports.isAttributeValue)(ast)) {
        if (ast.attrValueKind === AttributeValueKind.Slot) {
            return (0, ast_1.traverseJSExpression)(ast.script, each);
        }
    }
    return true;
};
exports.traverseExpression = traverseExpression;
var traverseExpressions = function (expressions, each) {
    for (var _i = 0, expressions_1 = expressions; _i < expressions_1.length; _i++) {
        var child = expressions_1[_i];
        if (!(0, exports.traverseExpression)(child, each)) {
            return false;
        }
    }
    return true;
};
var getNestedReferences = function (node, _statements) {
    if (_statements === void 0) { _statements = []; }
    if (node.nodeKind === NodeKind.Slot) {
        maybeAddReference(node.script, _statements);
    }
    else {
        if (node.nodeKind === NodeKind.Element) {
            for (var _i = 0, _a = node.attributes; _i < _a.length; _i++) {
                var attr = _a[_i];
                if (attr.attrKind == AttributeKind.KeyValueAttribute &&
                    attr.value &&
                    attr.value.attrValueKind === AttributeValueKind.Slot) {
                    if (attr.value.script.scriptKind === ast_1.ScriptExpressionKind.Node) {
                        (0, exports.getNestedReferences)(attr.value.script, _statements);
                    }
                    else if (attr.value.script.scriptKind === ast_1.ScriptExpressionKind.Reference) {
                        _statements.push([attr.value.script, attr.name]);
                    }
                }
                else if (attr.attrKind === AttributeKind.ShorthandAttribute &&
                    attr.reference.scriptKind === ast_1.ScriptExpressionKind.Reference) {
                    _statements.push([attr.reference, attr.reference[0]]);
                }
                else if (attr.attrKind === AttributeKind.SpreadAttribute &&
                    attr.script.scriptKind === ast_1.ScriptExpressionKind.Reference) {
                    _statements.push([attr.script, attr.script[0]]);
                }
            }
        }
        for (var _b = 0, _c = (0, exports.getChildren)(node); _b < _c.length; _b++) {
            var child = _c[_b];
            if (child.nodeKind === NodeKind.Element &&
                (0, exports.hasAttribute)(constants_1.PREVIEW_ATTR_NAME, child)) {
                continue;
            }
            (0, exports.getNestedReferences)(child, _statements);
        }
    }
    return _statements;
};
exports.getNestedReferences = getNestedReferences;
