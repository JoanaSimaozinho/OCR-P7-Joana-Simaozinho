"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInstanceAncestor = exports.isInstance = exports.getElementLabel = exports.nodePathToAry = exports.getStyleExports = exports.DiffedDataKind = exports.EvaluatedDataKind = exports.VirtualNodeKind = void 0;
var memo_1 = require("../core/memo");
var tree_1 = require("./tree");
var VirtualNodeKind;
(function (VirtualNodeKind) {
    VirtualNodeKind["Element"] = "Element";
    VirtualNodeKind["Text"] = "Text";
    VirtualNodeKind["Fragment"] = "Fragment";
    VirtualNodeKind["StyleElement"] = "StyleElement";
})(VirtualNodeKind = exports.VirtualNodeKind || (exports.VirtualNodeKind = {}));
var EvaluatedDataKind;
(function (EvaluatedDataKind) {
    EvaluatedDataKind["PC"] = "PC";
    EvaluatedDataKind["CSS"] = "CSS";
})(EvaluatedDataKind = exports.EvaluatedDataKind || (exports.EvaluatedDataKind = {}));
var DiffedDataKind;
(function (DiffedDataKind) {
    DiffedDataKind["CSS"] = "CSS";
    DiffedDataKind["PC"] = "PC";
})(DiffedDataKind = exports.DiffedDataKind || (exports.DiffedDataKind = {}));
var getStyleExports = function (data) {
    return data.kind === EvaluatedDataKind.PC ? data.exports.style : data.exports;
};
exports.getStyleExports = getStyleExports;
exports.nodePathToAry = (0, memo_1.memoize)(function (path) {
    return path.split(".").map(Number);
});
var getElementLabel = function (node) {
    var _a, _b;
    return node.attributes["data-pc-label"] ||
        ((_b = (_a = node.sourceInfo) === null || _a === void 0 ? void 0 : _a.instanceOf) === null || _b === void 0 ? void 0 : _b.componentName);
};
exports.getElementLabel = getElementLabel;
var isInstance = function (node) { var _a; return node.kind === VirtualNodeKind.Element && Boolean((_a = node.sourceInfo) === null || _a === void 0 ? void 0 : _a.instanceOf); };
exports.isInstance = isInstance;
var getInstanceAncestor = function (node, root) {
    return (0, tree_1.getNodeAncestors)((0, tree_1.getNodePath)(node, root), root).find(exports.isInstance);
};
exports.getInstanceAncestor = getInstanceAncestor;
// export const createVirtNodeSource = (path: number[], uri: string): VirtNodeSource => ({
//   uri,
//   path
// });
// export const createVirtNodeSourceFromInstance = (instance: VirtualNode, rendered: Record<string, LoadedData>) => {
//   for (const uri in rendered) {
//     const data = rendered[uri];
//     if (data.kind === EvaluatedDataKind.PC && containsNode(instance, data.preview)) {
//       return createVirtNodeSource(getNodePath(instance, data.preview).split(".").map(Number), uri);
//     }
//   }
// };
