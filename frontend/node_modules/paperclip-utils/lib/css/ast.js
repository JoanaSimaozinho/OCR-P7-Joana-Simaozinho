"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSelectorClassNames = exports.traverseStyleExpression = exports.isIncludePart = exports.isSelector = exports.isStyleSelector = exports.isStyleObject = exports.isMaybeStyleSheet = exports.isStyleDeclaration = exports.isRule = exports.traverseSheet = exports.getRuleClassNames = exports.getSheetClassNames = exports.StyleDeclarationKind = exports.SelectorKind = exports.RuleKind = void 0;
var RuleKind;
(function (RuleKind) {
    RuleKind["Style"] = "Style";
    RuleKind["Charset"] = "Charset";
    RuleKind["Namespace"] = "Namespace";
    RuleKind["Include"] = "Include";
    RuleKind["Comment"] = "Comment";
    RuleKind["FontFace"] = "FontFace";
    RuleKind["Media"] = "Media";
    RuleKind["Mixin"] = "Mixin";
    RuleKind["Export"] = "Export";
    RuleKind["Supports"] = "Supports";
    RuleKind["Page"] = "Page";
    RuleKind["Document"] = "Document";
    RuleKind["Keyframes"] = "Keyframes";
    RuleKind["Keyframe"] = "Keyframe";
})(RuleKind = exports.RuleKind || (exports.RuleKind = {}));
var SelectorKind;
(function (SelectorKind) {
    SelectorKind["Group"] = "Group";
    SelectorKind["Combo"] = "Combo";
    SelectorKind["Descendent"] = "Descendent";
    SelectorKind["This"] = "This";
    SelectorKind["Within"] = "Within";
    SelectorKind["Global"] = "Global";
    SelectorKind["Prefixed"] = "Prefixed";
    SelectorKind["PseudoElement"] = "PseudoElement";
    SelectorKind["PseudoParamElement"] = "PseudoParamElement";
    SelectorKind["Not"] = "Not";
    SelectorKind["Child"] = "Child";
    SelectorKind["Adjacent"] = "Adjacent";
    SelectorKind["Sibling"] = "Sibling";
    SelectorKind["Id"] = "Id";
    SelectorKind["Element"] = "Element";
    SelectorKind["Attribute"] = "Attribute";
    SelectorKind["Class"] = "Class";
    SelectorKind["AllSelector"] = "AllSelector";
})(SelectorKind = exports.SelectorKind || (exports.SelectorKind = {}));
var StyleDeclarationKind;
(function (StyleDeclarationKind) {
    StyleDeclarationKind["KeyValue"] = "KeyValue";
    StyleDeclarationKind["Include"] = "Include";
    StyleDeclarationKind["Media"] = "Media";
    StyleDeclarationKind["Content"] = "Content";
})(StyleDeclarationKind = exports.StyleDeclarationKind || (exports.StyleDeclarationKind = {}));
var getSheetClassNames = function (sheet, allClassNames) {
    if (allClassNames === void 0) { allClassNames = []; }
    return getRulesClassNames(sheet.rules, allClassNames);
};
exports.getSheetClassNames = getSheetClassNames;
var getRulesClassNames = function (rules, allClassNames) {
    if (allClassNames === void 0) { allClassNames = []; }
    for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {
        var rule = rules_1[_i];
        (0, exports.getRuleClassNames)(rule, allClassNames);
    }
    return allClassNames;
};
var getRuleClassNames = function (rule, allClassNames) {
    if (allClassNames === void 0) { allClassNames = []; }
    switch (rule.ruleKind) {
        case RuleKind.Media: {
            getRulesClassNames(rule.rules, allClassNames);
            break;
        }
        case RuleKind.Style: {
            (0, exports.getSelectorClassNames)(rule.selector, allClassNames);
            break;
        }
    }
    return allClassNames;
};
exports.getRuleClassNames = getRuleClassNames;
var traverseSheet = function (sheet, each) {
    return (traverseStyleExpressions(sheet.declarations, each) &&
        traverseStyleExpressions(sheet.rules, each));
};
exports.traverseSheet = traverseSheet;
var traverseChildren = function (traverse) { return function (rules, each) {
    for (var _i = 0, rules_2 = rules; _i < rules_2.length; _i++) {
        var rule = rules_2[_i];
        if (!traverse(rule, each)) {
            return false;
        }
    }
    return true;
}; };
var isRule = function (expression) {
    return RuleKind[expression.ruleKind] != null;
};
exports.isRule = isRule;
var isStyleDeclaration = function (expression) {
    return (StyleDeclarationKind[expression.declarationKind] !=
        null);
};
exports.isStyleDeclaration = isStyleDeclaration;
var isMaybeStyleSheet = function (expression) {
    return expression.rules != null &&
        expression.rules != null &&
        expression.raws != null;
};
exports.isMaybeStyleSheet = isMaybeStyleSheet;
var isStyleObject = function (expression) {
    return (expression.rules != null ||
        (0, exports.isStyleDeclaration)(expression) ||
        (0, exports.isRule)(expression) ||
        (0, exports.isStyleSelector)(expression));
};
exports.isStyleObject = isStyleObject;
var isStyleSelector = function (expression) {
    return SelectorKind[expression.selectorKind] != null;
};
exports.isStyleSelector = isStyleSelector;
var isSelector = function (expression) {
    return SelectorKind[expression.kind] != null;
};
exports.isSelector = isSelector;
var isIncludePart = function (expression) {
    return expression.name != null;
};
exports.isIncludePart = isIncludePart;
var traverseStyleExpression = function (rule, each) {
    if (each(rule) === false) {
        return false;
    }
    if ((0, exports.isRule)(rule)) {
        switch (rule.ruleKind) {
            case RuleKind.Media: {
                return traverseChildren(traverseStyleRule)(rule.rules, each);
            }
            case RuleKind.Export: {
                return traverseStyleExpressions(rule.rules, each);
            }
            case RuleKind.Style: {
                return traverseStyleRule(rule, each);
            }
            case RuleKind.Mixin: {
                return traverseStyleExpressions(rule.declarations, each);
            }
            case RuleKind.Keyframes: {
                return traverseChildren(function (child) {
                    return traverseStyleExpressions(child.declarations, each);
                })(rule.rules, each);
            }
        }
    }
    else if ((0, exports.isStyleDeclaration)(rule)) {
        switch (rule.declarationKind) {
            case StyleDeclarationKind.Include: {
                for (var _i = 0, _a = rule.mixinName.parts; _i < _a.length; _i++) {
                    var part = _a[_i];
                    if (!(0, exports.traverseStyleExpression)(part, each)) {
                        return false;
                    }
                }
                return true;
            }
        }
    }
    return true;
};
exports.traverseStyleExpression = traverseStyleExpression;
var traverseStyleExpressions = traverseChildren(exports.traverseStyleExpression);
var traverseStyleRule = function (rule, each) {
    return traverseStyleExpressions(rule.declarations, each) &&
        traverseChildren(traverseStyleRule)(rule.children, each);
};
var getSelectorClassNames = function (selector, allClassNames) {
    if (allClassNames === void 0) { allClassNames = []; }
    switch (selector.selectorKind) {
        case SelectorKind.Combo:
        case SelectorKind.Group: {
            for (var _i = 0, _a = selector.selectors; _i < _a.length; _i++) {
                var child = _a[_i];
                (0, exports.getSelectorClassNames)(child, allClassNames);
            }
            break;
        }
        case SelectorKind.Descendent: {
            (0, exports.getSelectorClassNames)(selector.ancestor, allClassNames);
            (0, exports.getSelectorClassNames)(selector.descendent, allClassNames);
            break;
        }
        case SelectorKind.PseudoElement: {
            (0, exports.getSelectorClassNames)(selector.target, allClassNames);
            break;
        }
        case SelectorKind.PseudoParamElement: {
            (0, exports.getSelectorClassNames)(selector.target, allClassNames);
            break;
        }
        case SelectorKind.Not: {
            (0, exports.getSelectorClassNames)(selector.selector, allClassNames);
            break;
        }
        case SelectorKind.Child: {
            (0, exports.getSelectorClassNames)(selector.parent, allClassNames);
            (0, exports.getSelectorClassNames)(selector.child, allClassNames);
            break;
        }
        case SelectorKind.Adjacent: {
            (0, exports.getSelectorClassNames)(selector.selector, allClassNames);
            (0, exports.getSelectorClassNames)(selector.nextSiblingSelector, allClassNames);
            break;
        }
        case SelectorKind.Sibling: {
            (0, exports.getSelectorClassNames)(selector.selector, allClassNames);
            (0, exports.getSelectorClassNames)(selector.siblingSelector, allClassNames);
            break;
        }
        case SelectorKind.Class: {
            allClassNames.push(selector.className);
            break;
        }
    }
    return allClassNames;
};
exports.getSelectorClassNames = getSelectorClassNames;
