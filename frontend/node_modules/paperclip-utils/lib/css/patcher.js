"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.patchCSSSheet = void 0;
var patchCSSSheet = function (sheet, mutations) {
    var newSheet = sheet;
    for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {
        var mutation = mutations_1[_i];
        switch (mutation.action.kind) {
            case "DeleteRule": {
                var rules = __spreadArray(__spreadArray([], newSheet.rules.slice(0, mutation.action.index), true), newSheet.rules.slice(mutation.action.index + 1), true);
                newSheet = __assign(__assign({}, newSheet), { rules: rules });
                break;
            }
            case "InsertRule": {
                var rules = __spreadArray(__spreadArray(__spreadArray([], newSheet.rules.slice(0, mutation.action.index), true), [
                    mutation.action.rule
                ], false), newSheet.rules.slice(mutation.action.index), true);
                newSheet = __assign(__assign({}, newSheet), { rules: rules });
                break;
            }
            case "ReplaceRule": {
                var rules = __spreadArray(__spreadArray(__spreadArray([], newSheet.rules.slice(0, mutation.action.index), true), [
                    mutation.action.rule
                ], false), newSheet.rules.slice(mutation.action.index + 1), true);
                newSheet = __assign(__assign({}, newSheet), { rules: rules });
                break;
            }
        }
    }
    return newSheet;
};
exports.patchCSSSheet = patchCSSSheet;
