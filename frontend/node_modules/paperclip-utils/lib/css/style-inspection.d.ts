export declare enum SelectorScopeKind {
    Element = "Element",
    Document = "Document"
}
declare type BaseSelectorScope<TKind extends SelectorScopeKind> = {
    kind: TKind;
};
export declare type ElementSelectorScope = BaseSelectorScope<SelectorScopeKind.Element>;
export declare type DocumentSelectorScope = BaseSelectorScope<SelectorScopeKind.Document>;
export declare type SelectorScope = ElementSelectorScope | DocumentSelectorScope;
export declare enum SelectorInfoKind {
    List = "list",
    All = "All",
    Element = "Element",
    PseudoElement = "PseudoElement",
    PsuedoParamElement = "PseudoParamElement",
    Attribute = "Attribute",
    Not = "Not",
    Id = "Id",
    Class = "Class",
    Combo = "Combo",
    Child = "Child",
    Descendent = "Descendent",
    Adjacent = "Adjacent",
    Sibling = "Sibling"
}
export declare type BaseSelectorInfo<TKind extends SelectorInfoKind> = {
    kind: TKind;
};
export declare type GroupSelectorInfo<TKind extends SelectorInfoKind> = {
    selectors: Array<BaseSelectorInfo<SelectorInfoKind>>;
} & BaseSelectorInfo<TKind>;
export declare type TargetSelectorInfo<TKind extends SelectorInfoKind> = {
    value: string;
} & BaseSelectorInfo<TKind>;
export declare type WrapperSelectorInfo<TKind extends SelectorInfoKind> = {
    selector: BaseSelectorInfo<SelectorInfoKind>;
} & BaseSelectorInfo<TKind>;
export declare type BinarySelectorInfo<TKind extends SelectorInfoKind> = {
    left: BaseSelectorInfo<SelectorInfoKind>;
    right: BaseSelectorInfo<SelectorInfoKind>;
} & BaseSelectorInfo<TKind>;
export declare type ListSelectorInfo = GroupSelectorInfo<SelectorInfoKind.List>;
export declare type ElementSelectorInfo = TargetSelectorInfo<SelectorInfoKind.Element>;
export declare type AllSelectorInfo = GroupSelectorInfo<SelectorInfoKind.All>;
export declare type PseudoElementSelectorInfo = TargetSelectorInfo<SelectorInfoKind.PseudoElement>;
export declare type PseudoParamElementSelectorInfo = TargetSelectorInfo<SelectorInfoKind.PsuedoParamElement>;
export declare type AttributeSelectorInfo = TargetSelectorInfo<SelectorInfoKind.Attribute>;
export declare type NotSelectorInfo = WrapperSelectorInfo<SelectorInfoKind.Not>;
export declare type IdSelectorInfo = TargetSelectorInfo<SelectorInfoKind.Id>;
export declare type ClassSelectorInfo = {
    name: string;
    value: string;
    scope: SelectorScope;
} & BaseSelectorInfo<SelectorInfoKind.Class>;
export declare type ComboSelectorInfo = GroupSelectorInfo<SelectorInfoKind.Combo>;
export declare type ChildSelectorInfo = BinarySelectorInfo<SelectorInfoKind.Child>;
export declare type DescendentSelectorInfo = BinarySelectorInfo<SelectorInfoKind.Descendent>;
export declare type AdjacentSelectorInfo = BinarySelectorInfo<SelectorInfoKind.Adjacent>;
export declare type SiblingSelectorInfo = BinarySelectorInfo<SelectorInfoKind.Sibling>;
export declare type SelectorInfo = ListSelectorInfo | ElementSelectorInfo | AllSelectorInfo | PseudoElementSelectorInfo | PseudoParamElementSelectorInfo | AttributeSelectorInfo | NotSelectorInfo | IdSelectorInfo | ClassSelectorInfo | ComboSelectorInfo | ChildSelectorInfo | DescendentSelectorInfo | AdjacentSelectorInfo | SiblingSelectorInfo;
export declare type StyleDeclarationInfo = {
    sourceId: string;
    name: string;
    value: string;
    active: boolean;
};
export declare type MediaInfo = {
    conditionText: string;
    active: boolean;
};
export declare type StyleRuleInfo = {
    selectorText: string;
    inherited: boolean;
    selectorInfo: SelectorInfo;
    pseudoElementName?: string;
    sourceId: string;
    sourceUri: string;
    media?: MediaInfo;
    declarations: StyleDeclarationInfo[];
    specificity: number;
};
export declare type NodeStyleInspection = {
    styleRules: StyleRuleInfo[];
};
export {};
