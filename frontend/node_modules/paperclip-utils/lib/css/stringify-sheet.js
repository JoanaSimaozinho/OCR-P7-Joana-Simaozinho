"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringifyCSSRule = exports.stringifyCSSSheet = void 0;
var path = require("path");
var url = require("url");
var stringifyCSSSheet = function (sheet, options) {
    if (options === void 0) { options = {}; }
    return sheet.rules.map(function (rule) { return (0, exports.stringifyCSSRule)(rule, options); }).join("\n\n");
};
exports.stringifyCSSSheet = stringifyCSSSheet;
var stringifyCSSRule = function (rule, options) {
    if (options === void 0) { options = {}; }
    switch (rule.kind) {
        case "Charset":
            return "@charset \"".concat(rule.value, "\"; ");
        case "Style":
            return stringifyStyleRule(rule, options);
        case "Page":
        case "Supports":
        case "Media":
            return stringifyConditionRule(rule, options);
        case "FontFace":
            return stringifyFontFaceRule(rule, options);
        case "Keyframes":
            return stringifyKeyframesRule(rule, options);
    }
};
exports.stringifyCSSRule = stringifyCSSRule;
var stringifyConditionRule = function (_a, options) {
    var name = _a.name, conditionText = _a.conditionText, rules = _a.rules;
    return "@".concat(name, " ").concat(conditionText, " {\n").concat(rules
        .map(function (style) { return (0, exports.stringifyCSSRule)(style, options); })
        .join("\n"), "\n}");
};
var stringifyKeyframesRule = function (_a, options) {
    var name = _a.name, rules = _a.rules;
    return "@keyframes ".concat(name, " {\n").concat(rules
        .map(function (style) { return stringifyKeyframeRule(style, options); })
        .join("\n"), "\n}");
};
var stringifyKeyframeRule = function (_a, options) {
    var key = _a.key, style = _a.style;
    return "".concat(key, " {\n").concat(style
        .map(function (style) { return stringifyStyle(style, options); })
        .join("\n"), "\n}");
};
var stringifyFontFaceRule = function (_a, options) {
    var style = _a.style;
    return "@font-face {\n".concat(style
        .map(function (style) { return stringifyStyle(style, options); })
        .join("\n"), "\n}");
};
var stringifyStyleRule = function (_a, options) {
    var selectorText = _a.selectorText, style = _a.style, rest = __rest(_a, ["selectorText", "style"]);
    return "".concat(selectorText, " {\n").concat(style
        .map(function (style) { return stringifyStyle(style, options); })
        .join("\n"), "\n}");
};
var stringifyStyle = function (_a, _b) {
    var name = _a.name, value = _a.value;
    var uri = _b.uri, resolveUrl = _b.resolveUrl;
    if (value) {
        // required for bundling, otherwise file protocol is maintained
        if (uri) {
            var urls = value.match(/(file:\/\/.*?)(?=['")])/g) || [];
            var selfPathname = url.fileURLToPath(uri);
            for (var _i = 0, urls_1 = urls; _i < urls_1.length; _i++) {
                var foundUrl = urls_1[_i];
                var pathname = url.fileURLToPath(foundUrl);
                var relativePath = path.relative(path.dirname(selfPathname), pathname);
                if (relativePath.charAt(0) !== ".") {
                    relativePath = "./" + relativePath;
                }
                value = value.replace(foundUrl, relativePath);
            }
        }
        if (value && resolveUrl) {
            if (value.includes("file:")) {
                var url_1 = value.match(/(file:\/\/[^)]+)/)[1];
                value = value.replace(url_1, resolveUrl(url_1));
            }
            else if (value.includes("url(")) {
                var parts = value.match(/url\(['"]?(.*?)['"]?\)/);
                var url_2 = parts && parts[1];
                if (url_2 && !url_2.includes("http")) {
                    value = value.replace(url_2, resolveUrl(url_2));
                }
            }
        }
    }
    return "  ".concat(name.trim(), ":").concat(value, ";");
};
