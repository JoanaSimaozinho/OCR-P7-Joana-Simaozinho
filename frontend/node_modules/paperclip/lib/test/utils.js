"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.noop = exports.cleanHTML = exports.stringifyLoadResult = exports.waitForRender = exports.waitForError = exports.createMockEngine = exports.TEST_FIXTURE_SRC_DIRECTORY = void 0;
var path = require("path");
var node_1 = require("../node");
var core_1 = require("../core");
var paperclip_utils_1 = require("paperclip-utils");
exports.TEST_FIXTURE_SRC_DIRECTORY = path.join(__dirname, "../../test-fixtures/src");
var createMockEngine = function (graph, onErr, io, mode) {
    if (onErr === void 0) { onErr = function (e) { return console.error(e); }; }
    if (io === void 0) { io = {}; }
    if (mode === void 0) { mode = core_1.EngineMode.SingleFrame; }
    return (0, node_1.createEngineDelegate)({
        io: __assign({ readFile: function (uri) {
                return graph[uri];
            }, fileExists: function (uri) {
                return Boolean(graph[uri]);
            }, resolveFile: function (from, to) {
                if (to.charAt(0) === "/") {
                    return to;
                }
                return path.join(path.dirname(from), to).replace(/\\/g, "/");
            }, getLintConfig: function () {
                return {
                    noUnusedStyles: true,
                    enforceVars: ["font-family", "padding", "color"]
                };
            } }, io),
        mode: mode
    }, onErr);
};
exports.createMockEngine = createMockEngine;
var waitForError = function (engine, test) {
    if (test === void 0) { test = function () { return true; }; }
    return new Promise(function (resolve) {
        engine.onEvent(function (event) {
            if (event.kind === paperclip_utils_1.EngineDelegateEventKind.Error && test(event)) {
                resolve(event);
            }
        });
    });
};
exports.waitForError = waitForError;
var waitForRender = function (engine, test) {
    if (test === void 0) { test = function () { return true; }; }
    return new Promise(function (resolve) {
        engine.onEvent(function (event) {
            if (event.kind === paperclip_utils_1.EngineDelegateEventKind.Loaded && test(event)) {
                resolve(event);
            }
        });
    });
};
exports.waitForRender = waitForRender;
var stringifyLoadResult = function (data, shouldCleanHTML) {
    if (shouldCleanHTML === void 0) { shouldCleanHTML = true; }
    if (data.kind === paperclip_utils_1.EvaluatedDataKind.PC) {
        var sheet = data.sheet, preview = data.preview, sheets = data.importedSheets;
        var sheetText = __spreadArray(__spreadArray([], sheets.map(function (_a) {
            var sheet = _a.sheet;
            return sheet;
        }), true), [sheet], false).map(function (sheet) {
            return (0, paperclip_utils_1.stringifyCSSSheet)(sheet, {
                resolveUrl: function (url) { return url.replace("file://", ""); }
            });
        })
            .join("\n")
            .trim();
        var buffer = "<style>".concat(sheetText, "</style>").concat((0, paperclip_utils_1.stringifyVirtualNode)(preview));
        return shouldCleanHTML ? (0, exports.cleanHTML)(buffer) : buffer;
    }
    else {
        return "";
    }
};
exports.stringifyLoadResult = stringifyLoadResult;
var cleanHTML = function (value) {
    return value.replace(/[\r\n\t\s]+/g, " ").trim();
};
exports.cleanHTML = cleanHTML;
// eslint-disable-next-line
var noop = function () { };
exports.noop = noop;
