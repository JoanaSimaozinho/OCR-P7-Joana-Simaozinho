"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var utils_1 = require("../utils");
var utils_2 = require("../../core/utils");
var core_1 = require("../../core");
describe(__filename + "#", function () {
    it("can render a simple style", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n        .a {\n          color: b;\n        }\n      </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>[class]._80f4925f_a { color:b; }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("displays an error if style url not found", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, err;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <style>\n          .rule {\n            background: url('/not/found.png')\n          }\n        </style>\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph, utils_2.noop, {
                            resolveFile: function () {
                                return null;
                            }
                        })];
                case 1:
                    engine = _a.sent();
                    try {
                        engine.open("/entry.pc");
                    }
                    catch (e) {
                        err = e;
                    }
                    (0, chai_1.expect)(err).to.eql({
                        errorKind: "Runtime",
                        uri: "/entry.pc",
                        range: {
                            start: { pos: 59, line: 4, column: 25 },
                            end: { pos: 91, line: 5, column: 11 }
                        },
                        message: "Unable to resolve file: /not/found.png from /entry.pc"
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it("can resolve some relative urls", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <style>\n          .rule {\n            background: url('./test.woff');\n            color: url(\"./test.woff\");\n            src: url(\"http://google.com\");\n          }\n        </style>\n      ",
                        "/test.woff": ""
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph, utils_2.noop, {
                            resolveFile: function () {
                                return "/test.woooof";
                            }
                        })];
                case 1:
                    engine = _a.sent();
                    result = engine.open("/entry.pc");
                    (0, chai_1.expect)((0, core_1.stringifyCSSSheet)(result.sheet).replace(/[\n\s]+/g, " ")).to.eql("[class]._80f4925f_rule { background:url(/test.woooof); color:url(/test.woooof); src:url(\"http://google.com\"); }");
                    return [2 /*return*/];
            }
        });
    }); });
    describe("Mixins", function () {
        it("can be created & used", function () { return __awaiter(void 0, void 0, void 0, function () {
            var graph, engine, text, _a;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        graph = {
                            "/entry.pc": "<style>\n          @mixin a {\n            color: blue;\n          }\n          div {\n            @include a;\n          }\n        </style>"
                        };
                        return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                    case 1:
                        engine = _c.sent();
                        _a = utils_1.stringifyLoadResult;
                        return [4 /*yield*/, engine.open("/entry.pc")];
                    case 2:
                        text = _a.apply(void 0, [_c.sent()]);
                        (0, chai_1.expect)(text).to.eql("<style>div._80f4925f { color:blue; }</style>");
                        return [2 /*return*/];
                }
            });
        }); });
        it("Displays an error if a mixin is not found", function () { return __awaiter(void 0, void 0, void 0, function () {
            var graph, engine, err, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        graph = {
                            "/entry.pc": "<style>\n          div {\n            @include a;\n          }\n        </style>"
                        };
                        return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                    case 1:
                        engine = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, engine.open("/entry.pc")];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        err = e_1;
                        return [3 /*break*/, 5];
                    case 5:
                        (0, chai_1.expect)(err).to.eql({
                            errorKind: "Runtime",
                            uri: "/entry.pc",
                            range: {
                                start: { pos: 45, line: 3, column: 22 },
                                end: { pos: 46, line: 3, column: 23 }
                            },
                            message: "Reference not found."
                        });
                        return [2 /*return*/];
                }
            });
        }); });
        it("can use an imported mixin", function () { return __awaiter(void 0, void 0, void 0, function () {
            var graph, engine, text, _a;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        graph = {
                            "/entry.pc": "<import as=\"mod\" src=\"./module.pc\"  /><style>\n          div {\n            @include mod.a;\n          }\n        </style>",
                            "/module.pc": "<style>\n          @export {\n            @mixin a {\n              color: orange;\n            }\n          }\n        </style>"
                        };
                        return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                    case 1:
                        engine = _c.sent();
                        _a = utils_1.stringifyLoadResult;
                        return [4 /*yield*/, engine.open("/entry.pc")];
                    case 2:
                        text = _a.apply(void 0, [_c.sent()]);
                        (0, chai_1.expect)(text).to.eql("<style>div._80f4925f { color:orange; }</style>");
                        return [2 /*return*/];
                }
            });
        }); });
        it("Displays an error if an imported mixin is not found", function () { return __awaiter(void 0, void 0, void 0, function () {
            var graph, engine, err, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        graph = {
                            "/entry.pc": "<import as=\"mod\" src=\"./module.pc\"  /><style>\n          div {\n            @include mod.a;\n          }\n        </style>",
                            "/module.pc": "<style>\n        </style>"
                        };
                        return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                    case 1:
                        engine = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, engine.open("/entry.pc")];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_2 = _a.sent();
                        err = e_2;
                        return [3 /*break*/, 5];
                    case 5:
                        (0, chai_1.expect)(err).to.eql({
                            errorKind: "Runtime",
                            uri: "/entry.pc",
                            range: {
                                start: { pos: 87, line: 3, column: 26 },
                                end: { pos: 88, line: 3, column: 27 }
                            },
                            message: "Reference not found."
                        });
                        return [2 /*return*/];
                }
            });
        }); });
        it("Displays an error if the import is not found", function () { return __awaiter(void 0, void 0, void 0, function () {
            var graph, engine, err, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        graph = {
                            "/entry.pc": "<style>\n          div {\n            @include mod.a;\n          }\n        </style>"
                        };
                        return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                    case 1:
                        engine = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, engine.open("/entry.pc")];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_3 = _a.sent();
                        err = e_3;
                        return [3 /*break*/, 5];
                    case 5:
                        (0, chai_1.expect)(err).to.eql({
                            errorKind: "Runtime",
                            uri: "/entry.pc",
                            range: {
                                start: { pos: 45, line: 3, column: 22 },
                                end: { pos: 48, line: 3, column: 25 }
                            },
                            message: "Reference not found."
                        });
                        return [2 /*return*/];
                }
            });
        }); });
        // expectation is still incorrect, just want to make sure that this doesn't break the engine
        it("Smoke -- can use nested refs", function () { return __awaiter(void 0, void 0, void 0, function () {
            var graph, engine, err, e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        graph = {
                            "/entry.pc": "<style>\n          div {\n            @include a.b.c;\n          }\n        </style>"
                        };
                        return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                    case 1:
                        engine = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, engine.open("/entry.pc")];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_4 = _a.sent();
                        err = e_4;
                        return [3 /*break*/, 5];
                    case 5:
                        (0, chai_1.expect)(err).to.eql({
                            errorKind: "Runtime",
                            uri: "/entry.pc",
                            range: {
                                start: { pos: 45, line: 3, column: 22 },
                                end: { pos: 46, line: 3, column: 23 }
                            },
                            message: "Reference not found."
                        });
                        return [2 /*return*/];
                }
            });
        }); });
        it("Displays an error if a mixin is used but not exported", function () { return __awaiter(void 0, void 0, void 0, function () {
            var graph, engine, err, e_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        graph = {
                            "/entry.pc": "<import as=\"mod\" src=\"./module.pc\"  /><style>\n          div {\n            @include mod.abcde;\n          }\n        </style>",
                            "/module.pc": "<style>\n          @mixin abcde {\n            color: orange;\n          }\n        </style>"
                        };
                        return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                    case 1:
                        engine = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, engine.open("/entry.pc")];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_5 = _a.sent();
                        err = e_5;
                        return [3 /*break*/, 5];
                    case 5:
                        (0, chai_1.expect)(err).to.eql({
                            errorKind: "Runtime",
                            uri: "/entry.pc",
                            range: {
                                start: { pos: 87, line: 3, column: 26 },
                                end: { pos: 92, line: 3, column: 31 }
                            },
                            message: "This mixin is private."
                        });
                        return [2 /*return*/];
                }
            });
        }); });
        it("Display an error if a mixins is already defined in the upper scope", function () { return __awaiter(void 0, void 0, void 0, function () {
            var graph, engine, err, e_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        graph = {
                            "/entry.pc": "<style>\n          @mixin abcde {\n            color: blue;\n          }\n          \n          @mixin abcde {\n            color: orange;\n          }\n        </style>"
                        };
                        return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                    case 1:
                        engine = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, engine.open("/entry.pc")];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_6 = _a.sent();
                        err = e_6;
                        return [3 /*break*/, 5];
                    case 5:
                        (0, chai_1.expect)(err).to.eql({
                            errorKind: "Runtime",
                            uri: "/entry.pc",
                            range: {
                                start: { pos: 98, line: 6, column: 18 },
                                end: { pos: 103, line: 6, column: 23 }
                            },
                            message: "This mixin is already declared in the upper scope."
                        });
                        return [2 /*return*/];
                }
            });
        }); });
        it("properly concats using multiple &", function () { return __awaiter(void 0, void 0, void 0, function () {
            var graph, engine, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        graph = {
                            "/entry.pc": "<style>\n          .company_list {\n            list-style: none;\n            margin: 0;\n            padding: 0;\n        \n            & li {\n        \n              display: block;\n              padding: var(--spacing-600) 0;\n        \n              & + & {\n                border-top: 1px solid var(--color-black-100);\n              }\n            }\n          }\n        </style>"
                        };
                        return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                    case 1:
                        engine = _a.sent();
                        return [4 /*yield*/, engine.open("/entry.pc")];
                    case 2:
                        result = _a.sent();
                        (0, chai_1.expect)((0, utils_1.stringifyLoadResult)(result)).to.eql("<style>[class]._80f4925f_company_list { list-style:none; margin:0; padding:0; } [class]._80f4925f_company_list li._80f4925f { display:block; padding:var(--spacing-600) 0; } [class]._80f4925f_company_list li._80f4925f + [class]._80f4925f_company_list li._80f4925f { border-top:1px solid var(--color-black-100); }</style>");
                        return [2 /*return*/];
                }
            });
        }); });
    });
    it("can use escape key in class", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n        .a\\:b {\n          color: blue;\n        }\n      </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)((0, utils_1.stringifyLoadResult)(result)).to.eql("<style>[class]._80f4925f_a\\:b { color:blue; }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("can use single line comment", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n\n\n      // :checked\n      input:checked {\n        & + .tab-label {\n          background: var(--midnight-darker);\n          &::after {\n            transform: rotate(90deg);\n          }\n        }\n        & ~ .tab-content {\n          max-height: 100vh;\n          padding: 1em;\n        }\n      }\n      \n      </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)((0, utils_1.stringifyLoadResult)(result)).to.eql("<style>input._80f4925f:checked + [class]._80f4925f_tab-label { background:var(--midnight-darker); } input._80f4925f:checked + [class]._80f4925f_tab-label::after { transform:rotate(90deg); } input._80f4925f:checked ~ [class]._80f4925f_tab-content { max-height:100vh; padding:1em; }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("errors if comment is unterminated", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, err, e_7;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n        /* foreverrrrrr\n      </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 5];
                case 4:
                    e_7 = _a.sent();
                    err = e_7;
                    return [3 /*break*/, 5];
                case 5:
                    (0, chai_1.expect)(err).to.eql({
                        errorKind: "Graph",
                        uri: "/entry.pc",
                        info: {
                            kind: "Unterminated",
                            message: "Unterminated element.",
                            range: {
                                start: { pos: 0, line: 1, column: 1 },
                                end: { pos: 7, line: 1, column: 8 }
                            }
                        }
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it("CSS vars are collected in the evaluated output", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n        .element {\n          --color: test;\n        }\n      </style>ab"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)(result.exports.style.variables["--color"]).to.eql({
                        name: "--color",
                        value: "test",
                        source: {
                            uri: "/entry.pc",
                            range: {
                                start: { pos: 37, line: 3, column: 11 },
                                end: { pos: 51, line: 3, column: 25 }
                            }
                        }
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it("CSS class names are pulled out", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n\n        // comment test\n        [a] {\n          & .color {\n\n          }\n        }\n        @export {\n          .div {\n\n          }\n        }\n        .element {\n          &.child {\n\n          }\n          &--child {\n\n          }\n        }\n      </style>ab"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)(result.exports.style.classNames).to.eql({
                        color: { name: "color", public: false, scopedName: "_80f4925f_color" },
                        div: { name: "div", public: true, scopedName: "_pub-80f4925f_div" },
                        child: { name: "child", public: false, scopedName: "_80f4925f_child" },
                        "element--child": {
                            name: "element--child",
                            public: false,
                            scopedName: "_80f4925f_element--child"
                        },
                        element: {
                            name: "element",
                            public: false,
                            scopedName: "_80f4925f_element"
                        }
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it("maintains space with & selector", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      .todo {\n        &:hover .destroy {\n            display: inline-block;\n        }\n        & .todo {\n          &--item .destroy {\n            display: inline-block;\n          }\n        }\n      }\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)((0, utils_1.stringifyLoadResult)(result)).to.eql("<style>[class]._80f4925f_todo:hover [class]._80f4925f_destroy { display:inline-block; } [class]._80f4925f_todo [class]._80f4925f_todo--item [class]._80f4925f_destroy { display:inline-block; }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("can parse nested tag selectors", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      a {\n        & svg:a {\n          margin-right: 4px;\n        }\n      }\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)((0, utils_1.stringifyLoadResult)(result)).to.eql("<style>a._80f4925f svg._80f4925f:a { margin-right:4px; }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("can render keyframes with a dash in the name", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      @keyframes lds-something3 {\n\n      }\n\n      div {\n        animation: lds-something3 1s;\n      }\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)((0, utils_1.stringifyLoadResult)(result)).to.eql("<style>@keyframes _80f4925f_lds-something3 { } div._80f4925f { animation:_80f4925f_lds-something3 1s; }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("can evaluated multiple nested selectors without &", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      a {\n        > b {\n          color: blue;\n        }\n        + c {\n          color: black;\n        }\n        ~ d {\n          color: red;\n        }\n        :not(.div) {\n          color: voilet;\n        }\n        ::active {\n          color: green;\n        }\n      }\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)((0, utils_1.stringifyLoadResult)(result)).to.eql("<style>a._80f4925f > b._80f4925f { color:blue; } a._80f4925f + c._80f4925f { color:black; } a._80f4925f ~ d._80f4925f { color:red; } a._80f4925f ._80f4925f:not(._80f4925f_div) { color:voilet; } a._80f4925f ._80f4925f::active { color:green; }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("AST location is correct with unicode characters", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, ast;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      /* \uD83D\uDC4D\uD83C\uDFFB */\n      // \uD83D\uDC4D\uD83C\uDFFB\n      .div {\n        content: \"\uD83D\uDC4C\"\n      }\n      .another {\n      }\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, engine.getLoadedAst("/entry.pc")];
                case 3:
                    ast = (_a.sent());
                    (0, chai_1.expect)(ast.children[0].sheet.rules[1].range).to.eql({
                        start: { pos: 88, line: 7, column: 7 },
                        end: { pos: 111, line: 9, column: 5 }
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it("includes keyframes in export", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      @keyframes a {\n\n      }\n      @export {\n        @keyframes b {\n\n        }\n      }\n\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)(result.exports.style.keyframes).to.eql({
                        a: {
                            name: "a",
                            public: false,
                            source: {
                                uri: "/entry.pc",
                                range: {
                                    start: {
                                        pos: 25,
                                        line: 2,
                                        column: 18
                                    },
                                    end: {
                                        pos: 44,
                                        line: 5,
                                        column: 7
                                    }
                                }
                            }
                        },
                        b: {
                            name: "b",
                            public: true,
                            source: {
                                uri: "/entry.pc",
                                range: {
                                    start: {
                                        pos: 73,
                                        line: 6,
                                        column: 20
                                    },
                                    end: {
                                        pos: 94,
                                        line: 9,
                                        column: 7
                                    }
                                }
                            }
                        }
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it("can export class names with _ prefix", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      @export {\n        ._b {\n\n        }\n      }\n\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)(result.exports.style.classNames).to.eql({
                        _b: { name: "_b", scopedName: "_pub-80f4925f__b", public: true }
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    // Addresses https://github.com/paperclipui/paperclip/issues/319
    it("shows an error if including a mixin that doesn't exist within a mixin that's exported", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, err, e_8;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      @export {\n        @mixin ab {\n          @include no-boom;\n        }\n      }\n\n      .test {\n        @include ab;\n      }\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 5];
                case 4:
                    e_8 = _a.sent();
                    err = e_8;
                    return [3 /*break*/, 5];
                case 5:
                    (0, chai_1.expect)(err).to.eql({
                        errorKind: "Runtime",
                        uri: "/entry.pc",
                        range: {
                            start: { pos: 63, line: 4, column: 20 },
                            end: { pos: 70, line: 4, column: 27 }
                        },
                        message: "Reference not found."
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    // Addresses https://github.com/paperclipui/paperclip/issues/326
    it("can have nested pseudo selectors", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      .parent {\n        .child:first-child {\n          color: blue\n        }\n      }\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>[class]._80f4925f_parent ._80f4925f_child._80f4925f:first-child { color:blue ; }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    // Addresses: https://github.com/paperclipui/paperclip/issues/340
    it("Can use mixins in other style blocks defined in the same page", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      @mixin a {\n        color: blue;\n      }\n    </style>\n    <style>\n      .div {\n        @include a;\n      }\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>[class]._80f4925f_div { color:blue; }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    // Addresses https://github.com/paperclipui/paperclip/issues/417
    it("properly renders global * selector", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      div {\n        > :global(*) {\n          color: blue;\n        }\n      }\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>div._80f4925f > * { color:blue; }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("Certain declarations are auto-prefixed", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      div {\n        mask-image: d;\n        \n      }\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>div._80f4925f { mask-image:d; -webkit-mask-image:d; }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("Properly renders nested selectors", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      .a {\n        .b {\n          &--c&--d {\n            color: blue;\n          }\n        }\n      }\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>[class]._80f4925f_a [class]._80f4925f_b--c[class]._80f4925f_a [class]._80f4925f_b--d { color:blue; }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("Can include style rules within mixins", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      @mixin test {\n        .a {\n          color: blue;\n        }\n      }\n\n      @include test;\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>[class]._80f4925f_a { color:blue; }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("Can include mixin rules into a style rule", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      @mixin test {\n        .e {\n          color: blue;\n        }\n      }\n\n      a {\n        b, c, d {\n          @include test;\n        }\n      }\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>a._80f4925f b._80f4925f [class]._80f4925f_e { color:blue; } a._80f4925f c._80f4925f [class]._80f4925f_e { color:blue; } a._80f4925f d._80f4925f [class]._80f4925f_e { color:blue; }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("Can include media declarations within style rule", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      a {\n        @media screen and (max-width: 450px) {\n          color: red;\n        }\n      }\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>@media screen and (max-width: 450px) { a._80f4925f { color:red; } }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("Can include a nested rule within a media rule", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      a {\n        @media screen and (max-width: 450px) {\n          color: red;\n          b {\n            color: orange;\n          }\n        }\n      }\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>@media screen and (max-width: 450px) { a._80f4925f b._80f4925f { color:orange; } a._80f4925f { color:red; } }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("Can define a selector mixin with @content", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      @mixin div {\n        div {\n          @content;\n        }\n      }\n\n      @include div {\n        color: red;\n      }\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>div._80f4925f { color:red; }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("Can include @content with a rule", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      @mixin desktop {\n        b {\n          @content;\n        }\n      }\n      a {\n        @include desktop {\n          c {\n            color: red;\n          }\n        }\n      }\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>a._80f4925f b._80f4925f c._80f4925f { color:red; }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("Can include @content within @media", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      @mixin desktop {\n        @media a {\n          @content;\n        }\n      }\n\n      @include desktop {\n        b {\n          color: red;\n        }\n        c {\n          color: red;\n        }\n      }\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>@media a { b._80f4925f { color:red; } c._80f4925f { color:red; } }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("can include a media query mixin", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      @mixin desktop {\n        @media screen and (max-width: 400px) {\n          @content;\n        }\n      }\n    \n      .test {\n        font-family: sans-serif;\n        @include desktop {\n          font-size: 40px;\n        }\n      }\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>[class]._80f4925f_test { font-family:sans-serif; } @media screen and (max-width: 400px) { [class]._80f4925f_test { font-size:40px; } }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    // Fix https://github.com/paperclipui/paperclip/issues/529
    it("can use & in media query include 1", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n      <style>\n        @mixin desktop {\n          @media screen and (max-width: 900px) {\n            @content;\n          }\n        }\n      </style>\n      <div component as=\"Test\">\n        <style>\n          a {\n            @include desktop {\n              &:nth-child(2n) {\n                color: red;\n              }\n            }\n          }\n        </style>\n      </div>\n      \n      <Test />\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)((0, utils_1.stringifyLoadResult)(result)).to.eql("<style>@media screen and (max-width: 900px) { ._376a18c0 a._80f4925f:nth-child(2n) { color:red; } ._376a18c0 a._80f4925f { } }</style><div class=\"_80f4925f _pub-80f4925f _376a18c0\"></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    // sanity after #529
    it("can use & in media query include 2", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n      <style>\n        @mixin mixin-a {\n          @media screen and (max-width: 900px) {\n            @content\n            b {\n              c {\n                @content\n              }\n            }\n          }\n        }\n\n        a {\n          @include mixin-a {\n            background: blue;\n            ee {\n              color: red;\n            }\n\n            &.ff {\n              color: orange;\n            }\n          }\n        }\n\n      </style>\n      \n      <Test />\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)((0, utils_1.stringifyLoadResult)(result)).to.eql("<style>@media screen and (max-width: 900px) { a._80f4925f b._80f4925f c._80f4925f { background:blue; } a._80f4925f b._80f4925f c._80f4925f ee._80f4925f { color:red; } a._80f4925f b._80f4925f c._80f4925f._80f4925f_ff { color:orange; } a._80f4925f ee._80f4925f { color:red; } a._80f4925f._80f4925f_ff { color:orange; } a._80f4925f { background:blue; } }</style><Test class=\"_80f4925f _pub-80f4925f\"></Test>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("properly orders include with nested selector", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n      @mixin desktop {\n        @media screen and (max-width: 400px) {\n          @content;\n        }\n      }\n    \n      .test {\n        font-family: sans-serif;\n        .b {\n          color: blue;\n        }\n        @include desktop {\n          .b {\n            font-size: 40px;\n          }\n        }\n      }\n    </style>"
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>[class]._80f4925f_test { font-family:sans-serif; } [class]._80f4925f_test [class]._80f4925f_b { color:blue; } @media screen and (max-width: 400px) { [class]._80f4925f_test [class]._80f4925f_b { font-size:40px; } [class]._80f4925f_test { } }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    // fix https://github.com/paperclipui/paperclip/issues/535
    it("multiple :not selectors work", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "<style>\n\n        .a {\n          &.hover {\n            color: blue;\n          }\n          &:not(:disabled):not(.transparent) {\n            &.hover {\n              color: red;\n            }\n          }\n        }\n    </style>\n    <div class=\"a hover\">I'm red</div>\n    <div class=\"a transparent hover\">I'm blue</div>\n    \n    "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>[class]._80f4925f_a._80f4925f_hover { color:blue; } [class]._80f4925f_a:not(:disabled):not(._80f4925f_transparent)._80f4925f_hover { color:red; }</style><div class=\"_80f4925f_a _pub-80f4925f_a a _80f4925f_hover _pub-80f4925f_hover hover _80f4925f _pub-80f4925f\">I'm red</div><div class=\"_80f4925f_a _pub-80f4925f_a a _80f4925f_transparent _pub-80f4925f_transparent transparent _80f4925f_hover _pub-80f4925f_hover hover _80f4925f _pub-80f4925f\">I'm blue</div>");
                    return [2 /*return*/];
            }
        });
    }); });
    // Fixes https://github.com/paperclipui/paperclip/issues/534
    it("can add extra specificty for nested elements", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n    \n      <div>\n        <style>\n          ._button {\n            &&& {\n              color: red;\n            }\n          }\n        </style>\n        <div class=\"_button\">I'm a button</div>\n      </div>\n    \n    "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>._406d2856 [class]._80f4925f__button[class]._80f4925f__button[class]._80f4925f__button { color:red; }</style><div class=\"_80f4925f _pub-80f4925f _406d2856\"><div class=\"_80f4925f__button _pub-80f4925f__button _button _80f4925f _pub-80f4925f\">I'm a button</div></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    // Fixes https://github.com/paperclipui/paperclip/issues/534
    it("ensures that :self selectors are given higher priority", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n    \n      <div>\n        <style>\n          color: blue;\n          :self {\n            ._button {\n              && {\n                color: red;\n              }\n            }\n          }\n        </style>\n        <div class=\"_button\">I'm a button</div>\n      </div>\n    \n    "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>._406d2856._406d2856 { color:blue; } ._406d2856._406d2856 [class]._80f4925f__button._406d2856._406d2856 [class]._80f4925f__button { color:red; }</style><div class=\"_80f4925f _pub-80f4925f _406d2856\"><div class=\"_80f4925f__button _pub-80f4925f__button _button _80f4925f _pub-80f4925f\">I'm a button</div></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it(":self is given higher priority than declarations", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n    \n      <div>\n        <style>\n          color: red;\n          :self {\n            color: blue;\n          }\n        </style>\n      </div>\n    \n    "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>._406d2856._406d2856 { color:red; } ._406d2856._406d2856 { color:blue; }</style><div class=\"_80f4925f _pub-80f4925f _406d2856\"></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it(":within applies styles when div is within ancestor", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n    \n      <div>\n        <style>\n          color: red;\n          &:within(.variant) {\n            color: blue;\n          }\n        </style>\n      </div>\n    \n    "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>._406d2856._406d2856 { color:red; } [class]._80f4925f_variant ._406d2856._406d2856 { color:blue; }</style><div class=\"_80f4925f _pub-80f4925f _406d2856\"></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("can nest selectors in :within", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n      <div class=\"variant\">\n        <div class=\"test\">\n          <style>\n            color: red;\n            \n            &:within(.variant) {\n              &.a {\n                color: red;\n              }\n              .b {\n                color: blue;\n              }\n            }\n          </style>\n        </div>\n      </div>\n    \n    "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>._9e7e6af9._9e7e6af9 { color:red; } [class]._80f4925f_variant ._9e7e6af9._9e7e6af9._80f4925f_a { color:red; } [class]._80f4925f_variant ._9e7e6af9._9e7e6af9 [class]._80f4925f_b { color:blue; }</style><div class=\"_80f4925f_variant _pub-80f4925f_variant variant _80f4925f _pub-80f4925f\"><div class=\"_80f4925f_test _pub-80f4925f_test test _80f4925f _pub-80f4925f _9e7e6af9\"></div></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("can nest group selectors in :within", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n      <div class=\"variant\">\n        <div class=\"test\">\n          <style>\n            &:within(.variant) {\n              &.a, &.b {\n                color: blue;\n              }\n            }\n          </style>\n        </div>\n      </div>\n    \n    "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>[class]._80f4925f_variant ._9e7e6af9._9e7e6af9._80f4925f_a { color:blue; } [class]._80f4925f_variant ._9e7e6af9._9e7e6af9._80f4925f_b { color:blue; }</style><div class=\"_80f4925f_variant _pub-80f4925f_variant variant _80f4925f _pub-80f4925f\"><div class=\"_80f4925f_test _pub-80f4925f_test test _80f4925f _pub-80f4925f _9e7e6af9\"></div></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it(":within(:global()) works", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n      <div class=\"variant\">\n        <div class=\"test\">\n          <style>\n            &:within(:global(.variant)) {\n              color: orange;\n            }\n          </style>\n        </div>\n      </div>\n    \n    "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>.variant ._9e7e6af9._9e7e6af9 { color:orange; }</style><div class=\"_80f4925f_variant _pub-80f4925f_variant variant _80f4925f _pub-80f4925f\"><div class=\"_80f4925f_test _pub-80f4925f_test test _80f4925f _pub-80f4925f _9e7e6af9\"></div></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("nested & works", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n      <div class=\"variant\">\n        <div class=\"test\">\n          <style>\n            &:within(.variant) {\n              &:empty {\n                display: block;\n              }\n              && {\n                color: red;\n              }\n            }\n          </style>\n        </div>\n      </div>\n    "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>[class]._80f4925f_variant ._9e7e6af9._9e7e6af9:empty { display:block; } [class]._80f4925f_variant ._9e7e6af9._9e7e6af9._9e7e6af9._9e7e6af9 { color:red; }</style><div class=\"_80f4925f_variant _pub-80f4925f_variant variant _80f4925f _pub-80f4925f\"><div class=\"_80f4925f_test _pub-80f4925f_test test _80f4925f _pub-80f4925f _9e7e6af9\"></div></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it(":within works as combo selector", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n      <div class=\"variant\">\n        <div class=\"test\">\n          <style>\n            &.variant:within(.light) {\n              color: blue;\n            }\n            :self(.variant:within(.light)) {\n              color: blue;\n            }\n          </style>\n        </div>\n      </div>\n    "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>[class]._80f4925f_light ._9e7e6af9._9e7e6af9._80f4925f_variant { color:blue; } [class]._80f4925f_light ._9e7e6af9._9e7e6af9._80f4925f_variant { color:blue; }</style><div class=\"_80f4925f_variant _pub-80f4925f_variant variant _80f4925f _pub-80f4925f\"><div class=\"_80f4925f_test _pub-80f4925f_test test _80f4925f _pub-80f4925f _9e7e6af9\"></div></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it(":self:empty works", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n      <div class=\"variant\">\n        <div class=\"test\">\n          <style>\n            :self {\n              &:empty {\n                color: red;\n              }\n            }\n          </style>\n        </div>\n      </div>\n    "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>._9e7e6af9._9e7e6af9:empty { color:red; }</style><div class=\"_80f4925f_variant _pub-80f4925f_variant variant _80f4925f _pub-80f4925f\"><div class=\"_80f4925f_test _pub-80f4925f_test test _80f4925f _pub-80f4925f _9e7e6af9\"></div></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("Can include @media in scoped :style", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n      <div class=\"variant\">\n        <style>\n          :self {\n              \n            @media screen and (min-width: 100px) {\n              color: red;\n            }\n          }\n        </style>\n      </div>\n    "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>@media screen and (min-width: 100px) { ._406d2856._406d2856 { color:red; } }</style><div class=\"_80f4925f_variant _pub-80f4925f_variant variant _80f4925f _pub-80f4925f _406d2856\"></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("Can include @media in scoped :style()", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n      <div class=\"variant\">\n        <style>\n          :self(:empty) {\n            @media screen and (min-width: 100px) {\n              color: red;\n            }\n          }\n        </style>\n      </div>\n    "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>@media screen and (min-width: 100px) { ._406d2856._406d2856:empty { color:red; } }</style><div class=\"_80f4925f_variant _pub-80f4925f_variant variant _80f4925f _pub-80f4925f _406d2856\"></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("Can include @media in :within()", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n      <div class=\"variant\">\n        <style>\n          &:within(:empty) {\n            @media screen and (min-width: 100px) {\n              color: red;\n            }\n          }\n        </style>\n      </div>\n    "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>@media screen and (min-width: 100px) { ._80f4925f:empty ._406d2856._406d2856 { color:red; } }</style><div class=\"_80f4925f_variant _pub-80f4925f_variant variant _80f4925f _pub-80f4925f _406d2856\"></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("Can use & without :self & stay ordered", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n      <div class=\"variant\">\n        <style>\n          color: orange;\n          &.red {\n            color: blue;\n          }\n        </style>\n      </div>\n    "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>._406d2856._406d2856 { color:orange; } ._406d2856._406d2856._80f4925f_red { color:blue; }</style><div class=\"_80f4925f_variant _pub-80f4925f_variant variant _80f4925f _pub-80f4925f _406d2856\"></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("Can use & without :self", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n      <div class=\"variant\">\n        <style>\n          && {\n            color: orange;\n          }\n        </style>\n      </div>\n    "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>._406d2856._406d2856._406d2856._406d2856 { color:orange; }</style><div class=\"_80f4925f_variant _pub-80f4925f_variant variant _80f4925f _pub-80f4925f _406d2856\"></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("Single & in scoped styled provides the same specificty", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n      <div class=\"variant\">\n        <style>\n          color: orange;\n          & {\n            color: red;\n          }\n        </style>\n      </div>\n    "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>._406d2856._406d2856 { color:orange; } ._406d2856._406d2856 { color:red; }</style><div class=\"_80f4925f_variant _pub-80f4925f_variant variant _80f4925f _pub-80f4925f _406d2856\"></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("Can :within within :self", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n      <div class=\"variant\">\n        <style>\n          :self(.variant) {\n            :within(.blue) {\n              color: orange;\n            }\n          }\n        </style>\n      </div>\n    "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>[class]._80f4925f_blue ._406d2856._406d2856._80f4925f_variant ._80f4925f { color:orange; }</style><div class=\"_80f4925f_variant _pub-80f4925f_variant variant _80f4925f _pub-80f4925f _406d2856\"></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("Can define :within within &", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n      <div class=\"variant\">\n        <style>\n          &.variant {\n            :within(.blue) {\n              color: orange;\n            }\n          }\n        </style>\n      </div>\n    "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>[class]._80f4925f_blue ._406d2856._406d2856._80f4925f_variant ._80f4925f { color:orange; }</style><div class=\"_80f4925f_variant _pub-80f4925f_variant variant _80f4925f _pub-80f4925f _406d2856\"></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("url vars work", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n      <div class=\"variant\">\n        <style>\n          div {\n            background: url(var(--test));\n          }\n        </style>\n      </div>\n    "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>._406d2856 div._80f4925f { background:url(var(--test)); }</style><div class=\"_80f4925f_variant _pub-80f4925f_variant variant _80f4925f _pub-80f4925f _406d2856\"></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("can load CSS files directly", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, text, _a;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <import src=\"./styles.css\" as=\"styles\" />\n\n        <div class=\"$styles.test\">\n          Hello world\n        </div>\n      ",
                        "/styles.css": "\n        .test {\n          color: red;\n        }\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _c.sent();
                    _a = utils_1.stringifyLoadResult;
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    text = _a.apply(void 0, [_c.sent()]);
                    (0, chai_1.expect)(text).to.eql("<style>[class]._pub-8f1a5142_test { color:red; }</style><div class=\"_pub-8f1a5142_test test _80f4925f _pub-80f4925f\"> Hello world </div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("breaks if ; is missing from decl", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, err, e_9;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <div>\n          <style>\n            div {\n              color: red\n              background: blue;\n            }\n          </style>\n          Hello world\n        </div>\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 5];
                case 4:
                    e_9 = _a.sent();
                    err = e_9;
                    return [3 /*break*/, 5];
                case 5:
                    (0, chai_1.expect)(err).to.eql({
                        errorKind: "Graph",
                        uri: "/entry.pc",
                        info: {
                            kind: "Unexpected",
                            message: "Unexpected token",
                            range: {
                                start: { pos: 100, line: 6, column: 25 },
                                end: { pos: 100, line: 6, column: 25 }
                            }
                        }
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    // TODO - this is broken with CSS patcher
    xit("breaks if inline declaration is defined without semicolon", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <style>\n          text-align: left\n          img {\n            width: 100px;\n          }\n        </style>\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)((0, utils_1.stringifyLoadResult)(result)).to.eql("a");
                    return [2 /*return*/];
            }
        });
    }); });
    // TODO - this is broken with CSS patcher
    it("styles are  sorted correctly", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <import src=\"./a.pc\" />\n        <style>\n          div {\n            color: orange;\n          }\n        </style>\n      ",
                        "/a.pc": "\n        <import src=\"./b.pc\" />\n        <style>\n          div {\n            color: blue;\n          }\n        </style>\n      ",
                        "/b.pc": "\n        <style>\n          div {\n            color: red;\n          }\n        </style>\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)((0, utils_1.stringifyLoadResult)(result)).to.eql("<style>div._8ae793af { color:red; } div._98523c41 { color:blue; } div._80f4925f { color:orange; }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("keyframes can have multiple percentages", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <style>\n          @keyframes abc {\n            50%, 75%, 100% {\n              color: red;\n            }\n          }\n        </style>\n        <div></div>\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)((0, utils_1.stringifyLoadResult)(result)).to.eql("<style>@keyframes _80f4925f_abc { 50%, 75%, 100% { color:red; } }</style><div class=\"_80f4925f _pub-80f4925f\"></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("media rule can have nested media rules", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <style>\n          @media screen {\n            .a {\n              color: blue;\n            }\n            @media b {\n              .a {\n                color: blue;\n              }\n            }\n          }\n        </style>\n        <div></div>\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)((0, utils_1.stringifyLoadResult)(result)).to.eql("<style>@media screen { [class]._80f4925f_a { color:blue; } @media b { [class]._80f4925f_a { color:blue; } } }</style><div class=\"_80f4925f _pub-80f4925f\"></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("@-webkit-keyframes works", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <style>\n          @-webkit-keyframes abc {\n            50%, 75%, 100% {\n              color: red;\n            }\n          }\n        </style>\n        <div></div>\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)((0, utils_1.stringifyLoadResult)(result)).to.eql("<style>@keyframes _80f4925f_abc { 50%, 75%, 100% { color:red; } }</style><div class=\"_80f4925f _pub-80f4925f\"></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("can escape class names", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <style>\n          @export {\n            .a\\:b {\n              color: red;\n            }\n            .a\\/b {\n              color: red;\n            }\n            .a\\.b {\n              color: red;\n            }\n          }\n        </style>\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)(result.exports).to.eql({
                        style: {
                            kind: "Exports",
                            classNames: {
                                "a.b": {
                                    name: "a.b",
                                    scopedName: "_pub-80f4925f_a.b",
                                    public: true
                                },
                                "a/b": {
                                    name: "a/b",
                                    scopedName: "_pub-80f4925f_a/b",
                                    public: true
                                },
                                "a:b": {
                                    name: "a:b",
                                    scopedName: "_pub-80f4925f_a:b",
                                    public: true
                                }
                            },
                            mixins: {},
                            variables: {},
                            keyframes: {}
                        },
                        components: {}
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it("colon can be added on class", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <import src=\"./test.css\" as=\"t\" />\n        <div class=\"$t.test:container $t.sm:p-3.5\"></div>\n      ",
                        "/test.css": "\n        .test\\:container {\n          color: red;\n        }\n        .sm\\:p-3\\.5 {\n          color: blue;\n        }\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)((0, utils_1.stringifyLoadResult)(result)).to.eql("<style>[class]._pub-b8a55827_test\\:container { color:red; } [class]._pub-b8a55827_sm\\:p-3\\.5 { color:blue; }</style><div class=\"_pub-b8a55827_test:container test:container _pub-b8a55827_sm:p-3.5 _80f4925f_sm:p-3.5 _pub-80f4925f_sm:p-3.5 sm:p-3.5 _80f4925f _pub-80f4925f\"></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("keyframes that are exported also include a private scoped one", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <style>\n          @export {\n            @keyframes a {\n              to {\n                color: red;\n              }\n            }\n          }\n        </style>\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)((0, utils_1.stringifyLoadResult)(result)).to.eql("<style>@keyframes _pub-80f4925f_a { to { color:red; } } @keyframes _80f4925f_a { to { color:red; } }</style>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("Can inject scopes into the document", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <import src=\"./test.css\" inject-styles />\n        <div class=\"test\"></div>\n      ",
                        "/test.css": "\n        .test {\n          color: red;\n        }\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)((0, utils_1.stringifyLoadResult)(result)).to.eql("<style>[class]._pub-b8a55827_test { color:red; }</style><div class=\"_80f4925f_test _pub-80f4925f_test _pub-b8a55827_test test _80f4925f _pub-80f4925f _pub-b8a55827\"></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    // fixes https://github.com/paperclipui/paperclip/issues/644
    it("Can include mixins in mixins", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <import src=\"./breakpoints.pc\" as=\"bp\" />\n        <style>\n\n        @mixin mini {\n          width: 100%;\n        }\n        </style>\n        <div>\n          <style>\n          display: flex;  \n          @include bp.mobile {\n            @include mini;\n          }\n          </style>\n        </div>\n      ",
                        "/breakpoints.pc": "\n        <style>\n          @export {\n            @mixin mobile {\n              @media screen and (max-width: 500px) {\n                @content;\n              }\n            }\n          }\n        </style>\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)((0, utils_1.stringifyLoadResult)(result)).to.eql("<style>._ae63497a._ae63497a { display:flex; } @media screen and (max-width: 500px) { ._ae63497a._ae63497a { width:100%; } }</style><div class=\"_80f4925f _pub-80f4925f _ae63497a\"></div>");
                    return [2 /*return*/];
            }
        });
    }); });
    it("patches CSS files", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result, result2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <import src=\"/test.css\" inject-styles />\n        <div />\n      ",
                        "/test.css": "\n        div {\n          color: red;\n        }\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)((0, utils_1.stringifyLoadResult)(result)).to.eql("<style>div._pub-b8a55827 { color:red; }</style><div class=\"_80f4925f _pub-80f4925f _pub-b8a55827\"></div>");
                    engine.updateVirtualFileContent("/test.css", "\n      div {\n        color: blue;\n      }\n    ");
                    result2 = engine.getLoadedData("/entry.pc");
                    (0, chai_1.expect)((0, utils_1.stringifyLoadResult)(result2)).to.eql("<style>div._pub-b8a55827 { color:blue; }</style><div class=\"_80f4925f _pub-80f4925f _pub-b8a55827\"></div>");
                    return [2 /*return*/];
            }
        });
    }); });
});
