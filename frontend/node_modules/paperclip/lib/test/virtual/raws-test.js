"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var paperclip_utils_1 = require("paperclip-utils");
var utils_1 = require("../utils");
describe(__filename + "#", function () {
    [
        "\n      <div></div>\n      <span></span>\n    ",
        "\n      <div>\n        a\n      </div>\n    ",
        "\n      <div>\n        a\n      </div>\n\n      b\n    ",
        "\n      <div></div>\n\n      <!---->\n      \n      <style>\n      </style>\n\n      b\n    ",
        "\n      <div></div>\n\n\n      <style>\n        a {\n          color: red;\n          background: blue;\n          div {\n            color: blue;\n          }\n        }\n      </style>\n\n      b\n    ",
        "\n      <style>\n        color: red;\n\n        @mixin abba {\n          color: blue;\n          @content;\n        }\n\n        @mixin b {\n          @content;\n        }\n\n        @font-face {\n          a: red;\n        }\n\n        @keyframes a {\n          0% {\n            color: blue;\n          }\n\n          // blah blah\n          10% {\n            color: red;\n          }\n        }\n        \n        div {\n          color: blue;\n          \n          // bba\n          background: orange;\n\n          /*\n            something else\n          */\n          @media screen and (max-width: 100%) {\n            color: red;\n\n            div {\n              color: red;\n              @include abba {\n                color: orange; \n              }\n            }\n          }\n        }\n      </style>\n    ",
        "\n    <!--------\n      a\n\n      \n    ---------->\n    <div></div>\n    "
    ].forEach(function (source) {
        it("Maintains the whitepsace for ".concat(source.replace(/[\s\r\n\t]+/g, " ")), function () { return __awaiter(void 0, void 0, void 0, function () {
            var graph, engine, ast, output;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        graph = {
                            "/entry.pc": source
                        };
                        return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                    case 1:
                        engine = _a.sent();
                        return [4 /*yield*/, engine.open("/entry.pc")];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, engine.getLoadedAst("/entry.pc")];
                    case 3:
                        ast = (_a.sent());
                        output = stringifyAST(ast);
                        // ends may be chopped off (because of text nodes), so
                        // only test inner conten
                        (0, chai_1.expect)(output.trim()).to.eql(source.trim());
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
var stringifyAST = function (ast) {
    var _a, _b;
    if ((0, paperclip_utils_1.isNode)(ast)) {
        switch (ast.nodeKind) {
            case paperclip_utils_1.NodeKind.Fragment: {
                return ast.children.map(stringifyAST).join("");
            }
            case paperclip_utils_1.NodeKind.Element: {
                var buffer = [ast.raws.before];
                buffer.push("<".concat(ast.tagName));
                if (ast.attributes.length) {
                    var attrs = ast.attributes.map(stringifyAST);
                    buffer.push(" ", attrs.join(" "));
                }
                buffer.push(">");
                buffer.push(ast.children.map(stringifyAST).join(""));
                buffer.push("</".concat(ast.tagName, ">"));
                return buffer.join("");
            }
            case paperclip_utils_1.NodeKind.Text: {
                return ast.value;
            }
            case paperclip_utils_1.NodeKind.Comment: {
                var buffer = [ast.raws.before, "<!--"];
                for (var _i = 0, _c = ast.annotation.properties; _i < _c.length; _i++) {
                    var prop = _c[_i];
                    switch (prop.kind) {
                        case paperclip_utils_1.AnnotationPropertyKind.Declaration: {
                            buffer.push(prop.raws.before);
                            break;
                        }
                        case paperclip_utils_1.AnnotationPropertyKind.Text: {
                            buffer.push(prop.raws.before, prop.value, prop.raws.after);
                            break;
                        }
                    }
                }
                buffer.push("-->", ast.raws.after);
                return buffer.join("");
            }
            case paperclip_utils_1.NodeKind.StyleElement: {
                var buffer = [(_a = ast.raws) === null || _a === void 0 ? void 0 : _a.before];
                buffer.push("<style>");
                buffer.push(stringifyAST(ast.sheet));
                buffer.push("</style>");
                buffer.push(((_b = ast.raws) === null || _b === void 0 ? void 0 : _b.after) || "");
                return buffer.join("");
            }
            case paperclip_utils_1.NodeKind.Slot: {
                return "";
            }
        }
    }
    else if ((0, paperclip_utils_1.isStyleObject)(ast)) {
        if ((0, paperclip_utils_1.isRule)(ast)) {
            switch (ast.ruleKind) {
                case paperclip_utils_1.RuleKind.Style: {
                    return stringifyStyleRule(ast);
                }
                case paperclip_utils_1.RuleKind.Mixin: {
                    var buffer = [ast.raws.before, "@mixin ", ast.name.value, " {"];
                    buffer.push.apply(buffer, ast.declarations.map(stringifyAST));
                    buffer.push.apply(buffer, ast.rules.map(stringifyStyleRule));
                    buffer.push("}", ast.raws.after);
                    return buffer.join("");
                }
                case paperclip_utils_1.RuleKind.FontFace: {
                    var buffer = [ast.raws.before, "@font-face {"];
                    buffer.push.apply(buffer, ast.declarations.map(stringifyAST));
                    buffer.push("}", ast.raws.after);
                    return buffer.join("");
                }
                case paperclip_utils_1.RuleKind.Keyframes: {
                    var buffer = [ast.raws.before, "@keyframes ", ast.name, " {"];
                    buffer.push.apply(buffer, ast.rules.map(stringifyKeyframe));
                    buffer.push("}", ast.raws.after);
                    return buffer.join("");
                }
            }
        }
        else if ((0, paperclip_utils_1.isStyleSelector)(ast)) {
            // NOTE: only need to pick one since raws aren't kept in selectors
            switch (ast.selectorKind) {
                case paperclip_utils_1.SelectorKind.Element: {
                    return ast.tagName;
                }
            }
        }
        else if ((0, paperclip_utils_1.isStyleDeclaration)(ast)) {
            switch (ast.declarationKind) {
                case paperclip_utils_1.StyleDeclarationKind.KeyValue: {
                    return "".concat(ast.raws.before).concat(ast.name, ": ").concat(ast.value, ";").concat(ast.raws.after);
                }
                case paperclip_utils_1.StyleDeclarationKind.Content: {
                    return "".concat(ast.raws.before, "@content;").concat(ast.raws.after);
                }
                case paperclip_utils_1.StyleDeclarationKind.Include: {
                    var buffer = [
                        ast.raws.before,
                        "@include ",
                        ast.mixinName.parts.map(function (part) { return part.name; }).join("."),
                        " {"
                    ];
                    buffer.push.apply(buffer, ast.declarations.map(stringifyAST));
                    buffer.push.apply(buffer, ast.rules.map(stringifyStyleRule));
                    buffer.push("}", ast.raws.after);
                    return buffer.join("");
                }
                case paperclip_utils_1.StyleDeclarationKind.Media: {
                    var buffer = [ast.raws.before, "@media", ast.conditionText, "{"];
                    buffer.push.apply(buffer, ast.declarations.map(stringifyAST));
                    buffer.push.apply(buffer, ast.rules.map(stringifyStyleRule));
                    buffer.push("}", ast.raws.after);
                    return buffer.join("");
                }
            }
        }
        else if ((0, paperclip_utils_1.isMaybeStyleSheet)(ast)) {
            var buffer = [ast.raws.before];
            buffer.push.apply(buffer, ast.declarations.map(stringifyAST));
            buffer.push.apply(buffer, ast.rules.map(stringifyAST));
            buffer.push(ast.raws.after);
            return buffer.join("");
        }
    }
};
var stringifyStyleRule = function (ast) {
    var buffer = [ast.raws.before, stringifyAST(ast.selector), " {"];
    buffer.push.apply(buffer, ast.declarations.map(stringifyAST));
    buffer.push.apply(buffer, ast.children.map(stringifyStyleRule));
    buffer.push("}", ast.raws.after);
    return buffer.join("");
};
var stringifyKeyframe = function (ast) {
    var buffer = [ast.raws.before, ast.key, "{"];
    buffer.push.apply(buffer, ast.declarations.map(stringifyAST));
    buffer.push("}", ast.raws.after);
    return buffer.join("");
};
