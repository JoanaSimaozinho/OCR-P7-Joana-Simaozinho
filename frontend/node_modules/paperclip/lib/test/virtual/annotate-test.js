"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var chai_1 = require("chai");
var paperclip_utils_1 = require("paperclip-utils");
var core_1 = require("../../core");
describe(__filename + "#", function () {
    it("can parse a @desc", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <!--\n          @desc \"some description\"\n        -->\n        <div />\n\n        <!--\n          okay\n        -->\n\n\n\n        something\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    result = engine.open("/entry.pc");
                    (0, chai_1.expect)(result.preview.children[0].annotations.values.desc.value).to.eql("some description");
                    return [2 /*return*/];
            }
        });
    }); });
    it("Can add metadata to an instance", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <span component as=\"Test\">\n          Hello\n        </span>\n\n        <!--\n          @desc \"abc\"\n        -->\n\n        <Test />\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    result = engine.open("/entry.pc");
                    (0, chai_1.expect)(result.preview.children[0].annotations.values.desc.value).to.eql("abc");
                    return [2 /*return*/];
            }
        });
    }); });
    it("Can add metadata to an imported instance", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <import src=\"/module.pc\" as=\"mod\" />\n\n        <!--\n          @desc \"abc\"\n        -->\n\n        <mod.Test />\n      ",
                        "/module.pc": "\n        <span export component as=\"Test\">\n          Hello\n        </span>\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    result = engine.open("/entry.pc");
                    (0, chai_1.expect)(result.preview.children[0].annotations.values.desc.value).to.eql("abc");
                    return [2 /*return*/];
            }
        });
    }); });
    it("properly updates annotations", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result, result2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <!--\n          @frame \"a\"\n        -->\n        hello\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 2:
                    result = _a.sent();
                    (0, chai_1.expect)(result.preview.children[0].annotations.values.frame.value).to.eql("a");
                    engine.updateVirtualFileContent("/entry.pc", "\n    <!--\n      @frame \"b\"\n    -->\n    hello\n  ");
                    return [4 /*yield*/, engine.open("/entry.pc")];
                case 3:
                    result2 = _a.sent();
                    (0, chai_1.expect)(result2.preview.children[0].annotations.values.frame.value).to.eql("b");
                    return [2 /*return*/];
            }
        });
    }); });
    it("Can have multiple annotations", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result, metadata;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <!--\n        @frame { title: \"Preview\", width: 1024, height: 768, x: -1145, y: -28 }\n        @tags { a: \"b\"}\n        -->\n        <span as=\"Test\">\n          Hello\n        </span>\n\n\n        <Test />\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph)];
                case 1:
                    engine = _a.sent();
                    result = engine.open("/entry.pc");
                    metadata = (0, paperclip_utils_1.computeVirtScriptObject)(result.preview.children[0].annotations);
                    (0, chai_1.expect)(metadata).to.eql({
                        tags: { a: "b" },
                        frame: { x: -1145, y: -28, title: "Preview", width: 1024, height: 768 }
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it("Does not render invisible component frames", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <!--\n          @frame { visible: false }\n        -->\n\n        <span component as=\"Test\">\n          Hello\n        </span>\n\n\n        <Test />\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph, null, {}, core_1.EngineMode.MultiFrame)];
                case 1:
                    engine = _a.sent();
                    result = engine.open("/entry.pc");
                    (0, chai_1.expect)(result.preview.children.length).to.eql(1);
                    return [2 /*return*/];
            }
        });
    }); });
    it("Does not render invisible element frames", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n        <!--\n        @frame { visible: false }\n        -->\n        <span component as=\"Test\">\n          Hello\n        </span>\n\n\n        <div />\n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph, null, {}, core_1.EngineMode.MultiFrame)];
                case 1:
                    engine = _a.sent();
                    result = engine.open("/entry.pc");
                    (0, chai_1.expect)(result.preview.children.length).to.eql(1);
                    return [2 /*return*/];
            }
        });
    }); });
    it("Does not render invisible text elements", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n\n        <!--\n        @frame { visible: false }\n        -->\n        <span component as=\"Test\">\n          Hello\n        </span>\n\n\n        <div />\n\n        <!--\n        @frame { visible: false }\n        -->\n\n        \n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph, null, {}, core_1.EngineMode.MultiFrame)];
                case 1:
                    engine = _a.sent();
                    result = engine.open("/entry.pc");
                    (0, chai_1.expect)(result.preview.children.length).to.eql(1);
                    return [2 /*return*/];
            }
        });
    }); });
    it("Can escape @ signs", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, ast;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n\n        <!--\\@frame-->\n        <span component as=\"Test\">\n          Hello\n        </span>\n        \n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph, null, {}, core_1.EngineMode.MultiFrame)];
                case 1:
                    engine = _a.sent();
                    engine.open("/entry.pc");
                    ast = engine.getLoadedAst("/entry.pc");
                    (0, chai_1.expect)(ast.children[0].annotation.properties).to.eql([
                        {
                            kind: "Text",
                            raws: { before: "", after: "" },
                            value: "\\@frame",
                            range: {
                                start: { pos: 14, line: 3, column: 13 },
                                end: { pos: 21, line: 3, column: 20 }
                            }
                        }
                    ]);
                    return [2 /*return*/];
            }
        });
    }); });
    it("Can comment out HTML comments", function () { return __awaiter(void 0, void 0, void 0, function () {
        var graph, engine, ast;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    graph = {
                        "/entry.pc": "\n\n        <!--span component as=\"Test\">\n        Hello\n      </span-->\n        <span component as=\"Test\">\n          Hello\n        </span>\n        \n      "
                    };
                    return [4 /*yield*/, (0, utils_1.createMockEngine)(graph, null, {}, core_1.EngineMode.MultiFrame)];
                case 1:
                    engine = _a.sent();
                    engine.open("/entry.pc");
                    ast = engine.getLoadedAst("/entry.pc");
                    (0, chai_1.expect)(ast.children[0].annotation.properties).to.eql([
                        {
                            kind: "Text",
                            raws: { before: "", after: "" },
                            value: 'span component as="Test">\n        Hello\n      </span',
                            range: {
                                start: { pos: 14, line: 3, column: 13 },
                                end: { pos: 66, line: 5, column: 13 }
                            }
                        }
                    ]);
                    return [2 /*return*/];
            }
        });
    }); });
});
