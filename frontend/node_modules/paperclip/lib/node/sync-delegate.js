"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEngineDelegate = void 0;
var NativeEngine = require("../../native/node/paperclip").NativeEngine;
var fs = require("fs");
var url_1 = require("url");
var path = require("path");
var core_1 = require("../core");
var paperclip_utils_1 = require("paperclip-utils");
var existsSyncCaseSensitive = function (uri) {
    var pathname = (0, url_1.fileURLToPath)(String(uri));
    var dir = path.dirname(pathname);
    var basename = path.basename(pathname);
    if (!fs.existsSync(dir)) {
        return false;
    }
    return fs.readdirSync(dir).includes(basename);
};
var getIOOptions = function (options) {
    var resolveFile = (0, paperclip_utils_1.resolveImportUri)(fs);
    return Object.assign({
        readFile: function (uri) {
            // eslint-disable-next-line
            // ts-ignore
            return fs.readFileSync(new url_1.URL(uri), "utf8");
        },
        fileExists: function (uri) {
            try {
                // eslint-disable-next-line
                var url = new url_1.URL(uri);
                // need to make sure that case matches _exactly_ since some
                // systems are sensitive to that.
                return existsSyncCaseSensitive(url) && fs.lstatSync(url).isFile();
            }
            catch (e) {
                // eslint-disable-next-line
                console.error(e);
                return false;
            }
        },
        resolveFile: function (from, to) {
            // TRUE boolean flag necessary here to resolve symlinks.
            return resolveFile(from, to);
        },
        getLintConfig: function (uri) {
            var info = (0, paperclip_utils_1.resolvePCConfig)(fs)(uri);
            if (!info) {
                return null;
            }
            return info[0].lintOptions;
        },
        mode: core_1.EngineMode.SingleFrame
    }, options.io, {
        mode: options.mode,
        includedUsedExpressions: options.includeUsedExpressions
    });
};
// eslint-disable-next-line
var createEngineDelegate = function (options, onCrash) {
    if (options === void 0) { options = {}; }
    if (onCrash === void 0) { onCrash = function () { }; }
    var io = getIOOptions(options || {});
    var readFile = io.readFile, fileExists = io.fileExists, resolveFile = io.resolveFile, getLintConfig = io.getLintConfig, _a = io.mode, mode = _a === void 0 ? core_1.EngineMode.SingleFrame : _a;
    return new core_1.EngineDelegate(NativeEngine.new(readFile, fileExists, resolveFile, getLintConfig, mode), io, onCrash ||
        function (e) {
            console.error(e);
        });
};
exports.createEngineDelegate = createEngineDelegate;
