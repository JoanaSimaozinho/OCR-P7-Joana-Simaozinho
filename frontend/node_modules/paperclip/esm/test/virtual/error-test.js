var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { expect } from "chai";
import { createMockEngine } from "../utils";
describe(__filename + "#", () => {
    [
        [
            `<a>abba`,
            {
                errorKind: "Graph",
                uri: "/entry.pc",
                info: {
                    kind: "Unterminated",
                    message: "Unterminated element.",
                    range: {
                        start: {
                            pos: 0,
                            line: 1,
                            column: 1
                        },
                        end: {
                            pos: 3,
                            line: 1,
                            column: 4
                        }
                    }
                }
            }
        ],
        [
            `\n\n<a>`,
            {
                errorKind: "Graph",
                uri: "/entry.pc",
                info: {
                    kind: "Unterminated",
                    message: "Unterminated element.",
                    range: {
                        start: {
                            pos: 2,
                            line: 3,
                            column: 1
                        },
                        end: {
                            pos: 5,
                            line: 3,
                            column: 4
                        }
                    }
                }
            }
        ],
        [
            `\n\n<a href='`,
            {
                errorKind: "Graph",
                uri: "/entry.pc",
                info: {
                    kind: "Unterminated",
                    message: "Unterminated string literal.",
                    range: {
                        start: {
                            pos: 10,
                            line: 3,
                            column: 9
                        },
                        end: {
                            pos: 11,
                            line: 3,
                            column: 10
                        }
                    }
                }
            }
        ],
        [
            `👏<a href='`,
            {
                errorKind: "Graph",
                uri: "/entry.pc",
                info: {
                    kind: "Unterminated",
                    message: "Unterminated string literal.",
                    range: {
                        start: {
                            pos: 10,
                            line: 1,
                            column: 11
                        },
                        end: {
                            pos: 11,
                            line: 1,
                            column: 12
                        }
                    }
                }
            }
        ],
        [
            `\n👏\n<a href='`,
            {
                errorKind: "Graph",
                uri: "/entry.pc",
                info: {
                    kind: "Unterminated",
                    message: "Unterminated string literal.",
                    range: {
                        start: {
                            pos: 12,
                            line: 3,
                            column: 9
                        },
                        end: {
                            pos: 13,
                            line: 3,
                            column: 10
                        }
                    }
                }
            }
        ]
    ].forEach(([source, expectedError]) => __awaiter(void 0, void 0, void 0, function* () {
        it(`Displays proper error information for ${source}`, () => __awaiter(void 0, void 0, void 0, function* () {
            const graph = {
                "/entry.pc": source
            };
            const engine = yield createMockEngine(graph);
            let err;
            try {
                yield engine.open("/entry.pc");
            }
            catch (e) {
                err = e;
            }
            expect(err).to.eql(expectedError);
        }));
    }));
});
