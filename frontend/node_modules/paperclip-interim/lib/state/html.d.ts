import { ShapeInference } from "paperclip";
import { StringRange } from "paperclip-utils";
import { InterimScriptExpression } from "./script";
export declare enum InterimNodeKind {
    Element = "Element",
    Component = "Component",
    Text = "Text",
    Slot = "Slot"
}
export declare type InterimBaseNode<TKind extends InterimNodeKind> = {
    kind: TKind;
    range: StringRange;
};
declare type BaseElement<TKind extends InterimNodeKind> = {
    id: string;
    tagName: string;
    attributes: Record<string, InterimAttribute>;
    innerTagName?: string;
    isInstance: boolean;
    scopeClassNames: string[];
} & InterimBaseNode<TKind>;
export declare type InterimComponent = {
    as: string;
    exported: boolean;
    children: InterimNode[];
    schema: ShapeInference;
} & BaseElement<InterimNodeKind.Component>;
export declare enum InterimAttributeValuePartKind {
    Static = "Static",
    Dynamic = "Dynamic",
    Shorthand = "Shorthand"
}
declare type BaseAttributeValuePart<TKind extends InterimAttributeValuePartKind> = {
    kind: TKind;
    range: StringRange;
};
export declare type DynamicAttributeValuePart = {
    script: InterimScriptExpression;
} & BaseAttributeValuePart<InterimAttributeValuePartKind.Dynamic>;
export declare type ShorthandAttributeValuePart = {} & BaseAttributeValuePart<InterimAttributeValuePartKind.Shorthand>;
export declare type StaticAttributeValuePart = {
    value: string;
} & BaseAttributeValuePart<InterimAttributeValuePartKind.Static>;
export declare type InterimAttributeValuePart = DynamicAttributeValuePart | StaticAttributeValuePart | ShorthandAttributeValuePart;
export declare type InterimAttributeValue = {
    range?: StringRange;
    variantName?: string;
    parts?: InterimAttributeValuePart[];
};
export declare type InterimAttribute = {
    variants: InterimAttributeValue[];
};
export declare type InterimElement = {
    children: InterimNode[];
    isInstance: boolean;
} & BaseElement<InterimNodeKind.Element>;
export declare type InterimText = {
    value: string;
} & InterimBaseNode<InterimNodeKind.Text>;
export declare type InterimSlotNode = {
    script: InterimScriptExpression;
} & InterimBaseNode<InterimNodeKind.Slot>;
export declare type InterimNode = InterimElement | InterimText | InterimComponent | InterimSlotNode;
export declare type InterimExpression = InterimNode | InterimScriptExpression;
export declare const traverseInterimExpression: (expr: InterimExpression, each: (descendent: InterimExpression) => boolean) => boolean;
export {};
