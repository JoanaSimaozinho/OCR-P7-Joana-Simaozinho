"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterimCompiler = void 0;
var paperclip_1 = require("paperclip");
var path = require("path");
var fs = require("fs");
var URL = require("url");
var paperclip_utils_1 = require("paperclip-utils");
var assets_1 = require("./assets");
var css_1 = require("./css");
var html_1 = require("./html");
var castAsFilePath = function (filePath) {
    if (filePath.indexOf("file://") === 0) {
        filePath = URL.fileURLToPath(filePath);
    }
    return filePath;
};
var defaultFIO = {
    readFile: function (filePath) {
        return fs.readFileSync(castAsFilePath(filePath));
    },
    getFileSize: function (filePath) {
        return fs.lstatSync(castAsFilePath(filePath)).size;
    }
};
var InterimCompiler = /** @class */ (function () {
    function InterimCompiler(_engine, options) {
        this._engine = _engine;
        this.options = __assign({ io: defaultFIO }, options);
    }
    InterimCompiler.prototype.parseFile = function (filePath) {
        var _a = this._engine.open(filePath), sheet = _a.sheet, exports = _a.exports;
        var ast = this._engine.parseFile(filePath);
        if ((0, paperclip_1.isErrorResult)(ast)) {
            throw ast.error;
        }
        if (sheet.error) {
            throw sheet.error;
        }
        return translateInterim(ast, sheet, castAsFilePath(filePath), this._engine, exports, this.options);
    };
    return InterimCompiler;
}());
exports.InterimCompiler = InterimCompiler;
var translateInterim = function (ast, sheet, filePath, engine, exports, options) {
    var components = [];
    var imports = [];
    var assets = [];
    if (ast.moduleKind === paperclip_utils_1.ModuleKind.PC) {
        imports = translateImports(ast, filePath, engine, options);
        assets = (0, assets_1.getAssets)(filePath, ast, sheet, engine, options);
        components = (0, html_1.translateComponents)(ast, filePath, engine, imports, assets);
    }
    else {
        assets = (0, assets_1.getAssets)(filePath, null, sheet, engine, options);
    }
    return {
        imports: imports,
        components: components,
        css: (0, css_1.translateCSS)(sheet, (0, paperclip_utils_1.isCSSExports)(exports) ? exports : exports.style, assets),
        assets: assets
    };
};
var translateImports = function (ast, filePath, engine, options) {
    return (0, paperclip_utils_1.getImports)(ast)
        .map(function (imp) {
        if (!(0, paperclip_utils_1.hasAttribute)("src", imp)) {
            return null;
        }
        var src = (0, paperclip_utils_1.getAttributeStringValue)("src", imp);
        // do not include css
        if ((0, paperclip_utils_1.isCSSFile)(src) && !options.targetOptions.importAssetsAsModules) {
            return null;
        }
        var resolvedFilePath = castAsFilePath(engine.resolveFile(filePath, src));
        if ((0, paperclip_utils_1.isCSSFile)(resolvedFilePath)) {
            resolvedFilePath = (0, paperclip_utils_1.getScopedCSSFilePath)(resolvedFilePath);
        }
        var usedTagNames = {};
        var namespace = (0, paperclip_utils_1.getAttributeStringValue)("as", imp);
        (0, paperclip_utils_1.traverseExpression)(ast, function (node) {
            if ((0, paperclip_utils_1.isNode)(node) &&
                node.nodeKind === paperclip_utils_1.NodeKind.Element &&
                node.tagName.includes(".")) {
                var _a = node.tagName.split("."), tagNamespace = _a[0], tagName = _a[1];
                if (tagNamespace === namespace) {
                    usedTagNames[tagName] = 1;
                }
            }
        });
        return {
            filePath: resolvedFilePath,
            relativePath: relative(path.relative(path.dirname(filePath), resolvedFilePath)),
            publicScopeId: "_pub-".concat((0, paperclip_utils_1.getStyleScopeId)(resolvedFilePath)),
            namespace: namespace,
            usedTagNames: Object.keys(usedTagNames),
            injectedStyles: (0, paperclip_utils_1.hasAttribute)("inject-styles", imp)
        };
    })
        .filter(Boolean);
};
var relative = function (path) {
    return path.charAt(0) === "." ? path : "./" + path;
};
