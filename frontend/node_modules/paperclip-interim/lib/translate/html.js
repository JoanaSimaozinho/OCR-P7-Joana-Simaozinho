"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.translateElement = exports.translateComponents = void 0;
var paperclip_1 = require("paperclip");
var paperclip_utils_1 = require("paperclip-utils");
var state_1 = require("../state");
var script_1 = require("./script");
var translateComponents = function (ast, filePath, engine, imports, assets) {
    var components = (0, paperclip_1.getParts)(ast);
    var context = {
        filePath: filePath,
        imports: imports,
        assets: assets,
        engine: engine,
        componentNames: (0, paperclip_utils_1.getPartIds)(ast),
        scopeIds: __spreadArray(__spreadArray([], getScopes(filePath), true), imports.filter(function (imp) { return imp.injectedStyles; }).map(function (imp) { return imp.publicScopeId; }), true)
    };
    return components.map(function (component) { return translateComponent(component, context); });
};
exports.translateComponents = translateComponents;
var getTagNameParts = function (tagName) {
    var parts = tagName.split(".");
    if (parts.length === 1) {
        return { tagName: parts[0] };
    }
    return { innerTagName: parts[1], tagName: parts[0] };
};
var translateComponent = function (component, context) {
    var as = (0, paperclip_utils_1.getAttributeStringValue)("as", component);
    var _a = getTagNameParts(component.tagName), tagName = _a.tagName, innerTagName = _a.innerTagName;
    return {
        id: component.id,
        tagName: tagName,
        as: as,
        innerTagName: innerTagName,
        schema: (0, paperclip_1.infer)(component),
        isInstance: !isNativeElement(component.tagName, context),
        scopeClassNames: getScopeClassNames(component, context),
        exported: (0, paperclip_utils_1.hasAttribute)("export", component),
        range: component.range,
        kind: state_1.InterimNodeKind.Component,
        attributes: translateAttributes(component, context),
        children: translateChildren(component.children, context)
    };
};
var translateChildren = function (children, context) {
    return children.map(function (child) { return translateChild(child, context); }).filter(Boolean);
};
var translateChild = function (node, context) {
    switch (node.nodeKind) {
        case paperclip_utils_1.NodeKind.Text: {
            return translateText(node);
        }
        case paperclip_utils_1.NodeKind.Element: {
            return (0, exports.translateElement)(node, context);
        }
        case paperclip_utils_1.NodeKind.Slot: {
            return translateSlotNode(node, context);
        }
    }
};
var getScopeClassNames = function (element, context) {
    var scopeIds = ["_".concat(element.id)];
    if (isNativeElement(element.tagName, context) ||
        isImportedInstance(element.tagName, context)) {
        scopeIds.push.apply(scopeIds, context.scopeIds);
    }
    return scopeIds;
};
var translateText = function (text) {
    return {
        value: text.value,
        kind: state_1.InterimNodeKind.Text,
        range: text.range
    };
};
var translateAttributes = function (element, context) {
    var groups = {};
    for (var _i = 0, _a = element.attributes; _i < _a.length; _i++) {
        var attribute = _a[_i];
        switch (attribute.attrKind) {
            case paperclip_utils_1.AttributeKind.KeyValueAttribute: {
                maybeAddAttributeValue(groups, attribute.name, {
                    range: attribute.range,
                    variantName: null,
                    parts: getAttributeValueParts(attribute.value, attribute.name, element.tagName, context)
                }, element.tagName, context);
                break;
            }
            case paperclip_utils_1.AttributeKind.PropertyBoundAttribute: {
                maybeAddAttributeValue(groups, attribute.name, {
                    range: attribute.range,
                    variantName: attribute.bindingName,
                    parts: getAttributeValueParts(attribute.value, attribute.name, element.tagName, context)
                }, element.tagName, context);
                break;
            }
            case paperclip_utils_1.AttributeKind.ShorthandAttribute: {
                maybeAddAttributeValue(groups, attribute.reference.path[0].name, {
                    range: attribute.range,
                    variantName: null,
                    parts: [
                        {
                            kind: state_1.InterimAttributeValuePartKind.Shorthand,
                            range: attribute.reference.range
                        }
                    ]
                }, element.tagName, context);
                break;
            }
            default: {
                throw new Error("Cannot handle attribute value kind ".concat(attribute.attrKind));
            }
        }
    }
    return groups;
};
var getAttributeValueParts = function (value, attrName, tagName, context) {
    if (!value) {
        return null;
    }
    switch (value.attrValueKind) {
        case paperclip_utils_1.AttributeValueKind.DyanmicString: {
            return value.values.map(function (part) {
                switch (part.partKind) {
                    case paperclip_utils_1.DynamicStringAttributeValuePartKind.ClassNamePierce: {
                        return {
                            kind: state_1.InterimAttributeValuePartKind.Static,
                            value: pierceClassName(part.className, context),
                            range: part.range
                        };
                    }
                    case paperclip_utils_1.DynamicStringAttributeValuePartKind.Literal: {
                        return {
                            kind: state_1.InterimAttributeValuePartKind.Static,
                            value: translateValuePart(part.value, attrName, tagName, context),
                            range: part.range
                        };
                    }
                    case paperclip_utils_1.DynamicStringAttributeValuePartKind.Slot: {
                        return {
                            kind: state_1.InterimAttributeValuePartKind.Dynamic,
                            script: (0, script_1.translateScript)(part, context),
                            range: part.range
                        };
                    }
                }
            });
        }
        case paperclip_utils_1.AttributeValueKind.String: {
            return [
                {
                    kind: state_1.InterimAttributeValuePartKind.Static,
                    value: translateValuePart(value.value, attrName, tagName, context),
                    range: value.range
                }
            ];
        }
        case paperclip_utils_1.AttributeValueKind.Slot: {
            return [
                {
                    kind: state_1.InterimAttributeValuePartKind.Dynamic,
                    script: (0, script_1.translateScript)(value.script, context),
                    range: value.range
                }
            ];
        }
    }
};
var getScopes = function (filePath) {
    return ["_".concat((0, paperclip_utils_1.getStyleScopeId)(filePath)), "_pub-".concat((0, paperclip_utils_1.getStyleScopeId)(filePath))];
};
var translateValuePart = function (part, attrName, elementName, context) {
    if (!isNativeElement(elementName, context)) {
        return part;
    }
    if (attrName === "class") {
        return part
            .split(" ")
            .map(function (slice) {
            if (!slice) {
                return "";
            }
            return addScopeIds(slice, context.scopeIds);
        })
            .join(" ");
    }
    if (attrName === "src") {
        var asset = context.assets.find(function (asset) { return asset.originalPath === part; });
        if (asset && asset.moduleContent) {
            return asset.moduleContent;
        }
    }
    return part;
};
var pierceClassName = function (className, context) {
    var scopeIds = context.scopeIds;
    var parts = className.split(".");
    if (parts.length === 2) {
        var imp = context.imports.find(function (imp) { return imp.namespace === parts[0]; });
        if (imp) {
            scopeIds = getScopes(imp.filePath);
        }
    }
    return addScopeIds(parts[parts.length - 1], scopeIds);
};
var addScopeIds = function (className, scopeIds) {
    return (scopeIds.map(function (scopeId) { return "".concat(scopeId, "_").concat(className); }).join(" ") +
        " ".concat(className));
};
var isNativeElement = function (tagName, context) {
    return (!isImportedInstance(tagName, context) &&
        !context.componentNames.includes(tagName));
};
var isImportedInstance = function (tagName, context) {
    return (tagName.includes(".") ||
        context.imports.find(function (imp) { return imp.namespace === tagName; }));
};
var maybeAddAttributeValue = function (groups, name, value, tagName, context) {
    // skip intermal props
    if (/^(export|component|as)$/.test(name)) {
        return;
    }
    var isNative = isNativeElement(tagName, context);
    if (!groups[name]) {
        groups[name] = { variants: [] };
    }
    var group = groups[name];
    // prohibit multiple attributes with the same variant name. E.g: `className="a" className="b"`. In this case, the last one wins.
    for (var i = group.variants.length; i--;) {
        var variant = group.variants[i];
        if (variant.variantName === value.variantName) {
            group.variants.splice(i, 1);
            break;
        }
    }
    group.variants.push(value);
};
var translateElement = function (element, context) {
    var _a = getTagNameParts(element.tagName), tagName = _a.tagName, innerTagName = _a.innerTagName;
    return {
        id: element.id,
        kind: state_1.InterimNodeKind.Element,
        innerTagName: innerTagName,
        tagName: tagName,
        isInstance: !isNativeElement(element.tagName, context),
        scopeClassNames: getScopeClassNames(element, context),
        attributes: translateAttributes(element, context),
        range: element.range,
        children: translateChildren(element.children, context)
    };
};
exports.translateElement = translateElement;
var translateSlotNode = function (slot, context) {
    return {
        kind: state_1.InterimNodeKind.Slot,
        script: (0, script_1.translateScript)(slot.script, context),
        range: slot.range
    };
};
