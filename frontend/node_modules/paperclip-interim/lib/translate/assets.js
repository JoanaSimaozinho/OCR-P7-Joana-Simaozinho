"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAssets = void 0;
var path = require("path");
var URL = require("url");
var paperclip_utils_1 = require("paperclip-utils");
var mime = require("mime");
var crypto = require("crypto");
var getAssets = function (modulePath, node, sheet, engine, options) {
    var outModulePath = options.targetOptions.outDir
        ? modulePath.replace(path.join(options.cwd, options.config.srcDir), path.join(options.cwd, options.targetOptions.outDir))
        : modulePath;
    var _a = collectAssetPaths(node, sheet), html = _a.html, css = _a.css;
    return __spreadArray(__spreadArray([], html.map(mapAsset(modulePath, outModulePath, engine, options)), true), css.map(mapAsset(modulePath, options.targetOptions.mainCSSFileName
        ? path.join(options.cwd, options.targetOptions.assetOutDir || options.targetOptions.outDir, options.targetOptions.mainCSSFileName)
        : outModulePath, engine, options)), true);
};
exports.getAssets = getAssets;
var mapAsset = function (modulePath, outModulePath, engine, options) { return function (originalPath) {
    var relativeAssetPath = originalPath;
    if (relativeAssetPath.indexOf("file") === 0) {
        relativeAssetPath = URL.fileURLToPath(relativeAssetPath);
        relativeAssetPath = resolvePath(modulePath, relativeAssetPath);
    }
    var filePath = engine.resolveFile(modulePath, relativeAssetPath);
    var moduleContent;
    var outputFilePath = filePath;
    var fileSize = options.io.getFileSize(filePath);
    if (fileSize <= options.targetOptions.embedAssetMaxSize ||
        options.targetOptions.embedAssetMaxSize === -1) {
        moduleContent =
            "data:".concat(mime.getType(filePath), ";base64,") +
                options.io.readFile(filePath).toString("base64");
    }
    else if (options.targetOptions.assetOutDir) {
        var srcDir = path.join(options.cwd, options.config.srcDir);
        var outputDir = path.join(options.cwd, options.targetOptions.assetOutDir);
        if (options.targetOptions.useAssetHashNames !== false) {
            var buffer = options.io.readFile(filePath);
            var md5Name = crypto
                .createHash("md5")
                .update(buffer)
                .digest("hex");
            outputFilePath = path.join(outputDir, md5Name + path.extname(filePath));
        }
        else {
            outputFilePath = path.join(outputDir, filePath.replace(srcDir, ""));
        }
        if (options.targetOptions.assetPrefix) {
            moduleContent =
                options.targetOptions.assetPrefix +
                    path.relative(options.cwd, outputFilePath);
        }
        else {
            moduleContent = resolvePath(outModulePath, outputFilePath);
        }
    }
    return {
        originalPath: originalPath,
        filePath: filePath,
        outputFilePath: outputFilePath,
        moduleContent: moduleContent
    };
}; };
var collectAssetPaths = function (root, sheet) {
    var html = {};
    var css = {};
    if (root) {
        (0, paperclip_utils_1.traverseExpression)(root, function (nested) {
            if ((0, paperclip_utils_1.isNode)(nested) &&
                nested.nodeKind === paperclip_utils_1.NodeKind.Element &&
                nested.tagName === "import") {
                return false;
            }
            if ((0, paperclip_utils_1.isAttribute)(nested)) {
                if (nested.attrKind === paperclip_utils_1.AttributeKind.KeyValueAttribute &&
                    nested.name === "src" &&
                    nested.value.attrValueKind === paperclip_utils_1.AttributeValueKind.String) {
                    html[nested.value.value] = 1;
                }
            }
        });
    }
    traverseVirtSheet(sheet, function (rule) {
        if (rule.style) {
            for (var _i = 0, _a = rule.style; _i < _a.length; _i++) {
                var value = _a[_i].value;
                if (/url\(/.test(value)) {
                    var parts = value.match(/url\(['"]?(.*?)['"]?\)/);
                    var url = parts && parts[1];
                    if (url && !url.includes("http")) {
                        css[url] = 1;
                    }
                }
            }
        }
    });
    return {
        html: Object.keys(html),
        css: Object.keys(css)
    };
};
var resolvePath = function (from, to) {
    var resolved = path.relative(path.dirname(from), to);
    if (resolved.charAt(0) !== ".") {
        resolved = "./" + resolved;
    }
    return resolved;
};
var traverseVirtSheet = function (sheet, each) {
    var each2 = function (rule) {
        if (rule.kind === paperclip_utils_1.VirtRuleKind.Media) {
            for (var _i = 0, _a = rule.rules; _i < _a.length; _i++) {
                var rule2 = _a[_i];
                each2(rule2);
            }
        }
        else {
            each(rule);
        }
    };
    for (var _i = 0, _a = sheet.rules; _i < _a.length; _i++) {
        var rule = _a[_i];
        each2(rule);
    }
};
