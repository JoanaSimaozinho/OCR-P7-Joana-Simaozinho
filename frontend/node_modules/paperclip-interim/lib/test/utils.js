"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringifyNode = exports.stringifyInterimModule = void 0;
var __1 = require("..");
var stringifyInterimModule = function (module) {
    var buffer = [
        "".concat(module.imports
            .map(function (imp) { return "<import src=".concat(imp.filePath, " as=").concat(imp.namespace, "  />"); })
            .join(""), "<style>").concat(module.css.sheetText
            .replace(/[\n\r\t]/g, " ")
            .replace(/\s+/g, " "), "</style>")
    ];
    buffer.push.apply(buffer, module.components.map(exports.stringifyNode));
    return buffer.join(" ");
};
exports.stringifyInterimModule = stringifyInterimModule;
var stringifyNode = function (node) {
    switch (node.kind) {
        case __1.InterimNodeKind.Element:
        case __1.InterimNodeKind.Component: {
            var buffer = ["<", node.tagName];
            for (var name_1 in node.attributes) {
                buffer.push(" ".concat(name_1, "=").concat(stringifyAttribute(node.attributes[name_1])));
            }
            buffer.push(">");
            buffer.push.apply(buffer, node.children.map(exports.stringifyNode));
            buffer.push("</", node.tagName, ">");
            return buffer.join("");
        }
        case __1.InterimNodeKind.Slot: {
            return (0, exports.stringifyNode)(node.script);
        }
        case __1.InterimScriptExpressionKind.Element: {
            return (0, exports.stringifyNode)(node.element);
        }
        case __1.InterimNodeKind.Text: {
            return "[TEXT]";
        }
    }
};
exports.stringifyNode = stringifyNode;
var stringifyAttribute = function (attr) {
    return attr.variants.map(function (variant) {
        var buffer = [];
        if (variant.variantName) {
            buffer.push(variant.variantName, "?");
        }
        if (variant.parts) {
            buffer.push.apply(buffer, variant.parts.map(stringifyVariantPart));
        }
        return buffer.join("+");
    });
};
var stringifyVariantPart = function (part) {
    switch (part.kind) {
        case __1.InterimAttributeValuePartKind.Dynamic: {
            return "[SCRIPT]";
        }
        case __1.InterimAttributeValuePartKind.Shorthand: {
            return "[SELF]";
        }
        case __1.InterimAttributeValuePartKind.Static: {
            return part.value;
        }
    }
};
