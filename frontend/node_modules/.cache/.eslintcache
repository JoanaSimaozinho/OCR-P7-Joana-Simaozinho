[{"/Users/joanasimaozinho/Documents/joana-simaozinho-groupomania-react/frontend/src/index.js":"1","/Users/joanasimaozinho/Documents/joana-simaozinho-groupomania-react/frontend/src/reportWebVitals.js":"2","/Users/joanasimaozinho/Documents/joana-simaozinho-groupomania-react/frontend/src/App.js":"3"},{"size":354,"mtime":1662209701502,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1662143073067,"results":"6","hashOfConfig":"7"},{"size":34157,"mtime":1662555549209,"results":"8","hashOfConfig":"5"},{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"1c7fylw",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ojazwa",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/joanasimaozinho/Documents/joana-simaozinho-groupomania-react/frontend/src/index.js",["19"],[],"import * as React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>\n);\n\n","/Users/joanasimaozinho/Documents/joana-simaozinho-groupomania-react/frontend/src/reportWebVitals.js",[],[],"/Users/joanasimaozinho/Documents/joana-simaozinho-groupomania-react/frontend/src/App.js",[],[],{"ruleId":null,"fatal":true,"severity":2,"message":"20"},"Parsing error: Caching was left unconfigured. Babel's plugins, presets, and .babelrc.js files can be configured\nfor various types of caching, using the first param of their handler functions:\n\nmodule.exports = function(api) {\n  // The API exposes the following:\n\n  // Cache the returned value forever and don't call this function again.\n  api.cache(true);\n\n  // Don't cache at all. Not recommended because it will be very slow.\n  api.cache(false);\n\n  // Cached based on the value of some function. If this function returns a value different from\n  // a previously-encountered value, the plugins will re-evaluate.\n  var env = api.cache(() => process.env.NODE_ENV);\n\n  // If testing for a specific env, we recommend specifics to avoid instantiating a plugin for\n  // any possible NODE_ENV value that might come up during plugin execution.\n  var isProd = api.cache(() => process.env.NODE_ENV === \"production\");\n\n  // .cache(fn) will perform a linear search though instances to find the matching plugin based\n  // based on previous instantiated plugins. If you want to recreate the plugin and discard the\n  // previous instance whenever something changes, you may use:\n  var isProd = api.cache.invalidate(() => process.env.NODE_ENV === \"production\");\n\n  // Note, we also expose the following more-verbose versions of the above examples:\n  api.cache.forever(); // api.cache(true)\n  api.cache.never();   // api.cache(false)\n  api.cache.using(fn); // api.cache(fn)\n\n  // Return the value that will be cached.\n  return { };\n};"]