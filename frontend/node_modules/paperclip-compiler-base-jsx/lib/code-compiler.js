"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.codeCompiler = void 0;
var paperclip_interim_1 = require("paperclip-interim");
var lodash_1 = require("lodash");
var paperclip_interim_2 = require("paperclip-interim");
var utils_1 = require("./utils");
var html_entities_1 = require("html-entities");
var entities = new html_entities_1.Html5Entities();
var UTILS = "\n\nfunction getDefault(module) {\n  return module.default || module;\n}\n\nfunction castStyle(value) {\n  var tov = typeof value;\n  if (tov === \"object\" || tov !== \"string\" || !value) return value;\n  return value.trim().split(\";\").reduce(function (obj, keyValue) {\n    var kvp = keyValue.split(\":\");\n    var key = kvp[0];\n    var value = kvp[1];\n    if (!value || value === \"undefined\") return obj;\n    var trimmedValue = value.trim();\n    if (trimmedValue === \"undefined\" || !trimmedValue) return obj;\n    obj[key.trim()] = trimmedValue;\n    return obj;\n  }, {});\n}".trim();
var codeCompiler = function (_a) {
    var _b;
    var preflight = _a.preflight, _c = _a.imports, imports = _c === void 0 ? "" : _c, vendorName = _a.vendorName;
    var translateExportedStyles = (0, utils_1.addBuffer)([
        "export const classNames = {\n",
        utils_1.startBlock,
        function (context) {
            return (0, utils_1.writeJoin)(Object.keys(context.module.css.exports.classNames), ",\n", function (key) {
                return (0, utils_1.addBuffer)([
                    JSON.stringify(key),
                    ": ",
                    JSON.stringify(context.module.css.exports.classNames[key])
                ]);
            })(context);
        },
        utils_1.endBlock,
        "\n",
        "};"
    ]);
    var translateImports = function (context) {
        return context.module.imports.reduce(function (context, imp) {
            context = (0, utils_1.addBuffer)(["import ", "_".concat((0, lodash_1.camelCase)(imp.publicScopeId))])(context);
            if (imp.usedTagNames.length) {
                var parts = [];
                for (var _i = 0, _a = imp.usedTagNames; _i < _a.length; _i++) {
                    var tagName = _a[_i];
                    parts.push(tagName +
                        " as " +
                        (0, utils_1.getElementInstanceName)(imp.namespace, tagName, context));
                }
                context = (0, utils_1.addBuffer)([", {", (0, utils_1.arrayJoin)(parts, ","), "}"])(context);
            }
            context = (0, utils_1.addBuffer)([" from \"".concat(imp.relativePath, "\";"), "\n"])(context);
            return context;
        }, context);
    };
    var compileComponents = function (context) {
        return (0, utils_1.writeJoin)(context.module.components, "\n", compileComponent)(context);
    };
    var compileComponent = function (component) {
        var tagName = component.as === "default" ? "$$Default" : component.as;
        return (0, utils_1.writeSourceNode)(component.range.start, (0, utils_1.addBuffer)([
            "var ".concat(tagName, " = ").concat(vendorName, ".memo(").concat(vendorName, ".forwardRef(function ").concat(tagName, "(props, ref) {"),
            "\n",
            utils_1.startBlock,
            "return ",
            compileElement(component),
            utils_1.endBlock,
            "\n",
            "}));\n",
            function (context) {
                if (!component.exported) {
                    return context;
                }
                if (component.as === "default") {
                    return (0, utils_1.addBuffer)(["export default ".concat(tagName, ";\n")])(context);
                }
                else {
                    return (0, utils_1.addBuffer)(["export { ".concat(component.as, " };\n")])(context);
                }
            }
        ]));
    };
    var compileElement = function (element) {
        return (0, utils_1.writeSourceNode)(element.range.start, function (context) {
            context = (0, utils_1.addBuffer)(["".concat(vendorName, ".createElement(")])(context);
            var tagName;
            if (element.tagName === "fragment") {
                tagName = "".concat(vendorName, ".Fragment");
            }
            else {
                tagName = nativeOrInstanceTag(element, context);
            }
            if (element.attributes.tagName && !element.isInstance) {
                var tagNameStr_1 = tagName;
                tagName = function (context) {
                    return (0, utils_1.addBuffer)(["props.tagName || ", tagNameStr_1])(context);
                };
            }
            return (0, utils_1.addBuffer)([
                tagName,
                ", ",
                compileAttributes(element),
                ", ",
                compileChildren(element.children),
                ")"
            ])(context);
        });
    };
    var nativeOrInstanceTag = function (element, context) {
        if (element.isInstance) {
            return (0, utils_1.getElementInstanceName)(element.tagName, element.innerTagName, context);
        }
        return "\"".concat(element.tagName, "\"");
    };
    var compileAttributes = function (element) { return function (context) {
        context = (0, utils_1.addBuffer)(["{\n", utils_1.startBlock])(context);
        context = writeClassAttribute(element)(context);
        var omitAttributeNames = ["class"];
        if (!element.isInstance) {
            omitAttributeNames.push("tagName");
        }
        var attrKeys = Object.keys((0, lodash_1.omit)(element.attributes, omitAttributeNames));
        if (element.kind === paperclip_interim_1.InterimNodeKind.Component) {
            context = (0, utils_1.addBuffer)(["\"ref\": ref,\n"])(context);
        }
        // context = addBuffer([`"key": "${element.id}",\n`])(context);
        context = (0, utils_1.writeJoin)(attrKeys, ",\n", function (key) {
            return (0, utils_1.addBuffer)([
                (0, utils_1.addBuffer)([JSON.stringify(key), ": "]),
                compileAttributeValue(element, key, element.attributes[key].variants, function () { return function (write) { return write; }; })
            ]);
        }, true)(context);
        return (0, utils_1.addBuffer)([utils_1.endBlock, "}"])(context);
    }; };
    var writeClassAttribute = function (element) { return function (context) {
        var writeClassValue = (0, utils_1.addBuffer)([
            "\"".concat(element.scopeClassNames.join(" "), "\""),
            element.attributes.class &&
                (0, utils_1.addBuffer)([
                    " + ",
                    compileAttributeValue(element, "class", element.attributes.class.variants, function (conditional) {
                        return conditional
                            ? compileConditionalClassNamePart
                            : compileEssentialClassNamePart;
                    })
                ])
        ]);
        if (element.tagName === "fragment") {
            if (element.attributes.tagName) {
                var inner = writeClassValue;
                writeClassValue = (0, utils_1.addBuffer)(["props.tagName", " ? ", inner, " : null"]);
            }
            else {
                return context;
            }
        }
        return (0, utils_1.addBuffer)([
            "".concat(element.isInstance ? '"class"' : '"className"', ": "),
            writeClassValue,
            ",\n"
        ])(context);
    }; };
    var compileConditionalClassNamePart = function (inner) {
        return (0, utils_1.addBuffer)(["(", inner, " ? ", "\" \" + ", inner, " : ", "\"\"", ")"]);
    };
    var compileEssentialClassNamePart = function (inner) {
        return (0, utils_1.addBuffer)(["\" \" + ", inner]);
    };
    var compileAttributeValue = function (element, attrName, variants, outer) {
        return (0, utils_1.writeJoin)(variants, " + ", function (variant) { return function (context) {
            if (!variant.parts) {
                return (0, utils_1.addBuffer)(["true"])(context);
            }
            if (variant.variantName) {
                context = (0, utils_1.addBuffer)([
                    "(",
                    prop(variant.variantName),
                    " ? ",
                    compileVariantParts(element, attrName, variant.parts, outer),
                    " : \"\")"
                ])(context);
            }
            else {
                context = compileVariantParts(element, attrName, variant.parts, outer)(context);
            }
            return context;
        }; });
    };
    var compileVariantParts = function (element, attrName, parts, outer) { return function (context) {
        var write = (0, utils_1.writeJoin)(parts, " + ", compileAttributeValuePart(attrName, outer));
        if (attrName === "style") {
            write = (0, utils_1.addBuffer)(["castStyle(", write, ")"]);
        }
        if (attrName === "src" &&
            !element.isInstance &&
            context.targetOptions.importAssetsAsModules === true &&
            parts.length === 1 &&
            parts[0].kind === paperclip_interim_1.InterimAttributeValuePartKind.Static) {
            write = (0, utils_1.addBuffer)(["getDefault(require(", write, "))"]);
        }
        return write(context);
    }; };
    var prop = function (name) { return "props[\"".concat(name, "\"]"); };
    var compileAttributeValuePart = function (name, format) { return function (part) {
        switch (part.kind) {
            case paperclip_interim_1.InterimAttributeValuePartKind.Dynamic:
                return compileDynamicAttributePart(part, format);
            case paperclip_interim_1.InterimAttributeValuePartKind.Static:
                return compileStaticAttributePart(part, format);
            case paperclip_interim_1.InterimAttributeValuePartKind.Shorthand:
                return compileShorthandAttributePart(name, part, format);
        }
    }; };
    var compileDynamicAttributePart = function (part, outer) {
        var _a;
        var write = compileScript(part.script);
        if (outer) {
            var prev = write;
            write = outer(true)(prev);
        }
        else {
            write = (0, utils_1.addBuffer)(["(", write, " || ", '""', ")"]);
        }
        return (0, utils_1.writeSourceNode)((_a = part.range) === null || _a === void 0 ? void 0 : _a.start, write);
    };
    var CONJ_MAP = (_b = {},
        _b[paperclip_interim_1.InterimConjunctionOperator.And] = "&&",
        _b[paperclip_interim_1.InterimConjunctionOperator.Or] = "||",
        _b);
    var compileScript = function (script) {
        return (0, utils_1.writeSourceNode)(script.range.start, scriptCompiler(script));
    };
    var scriptCompiler = function (script) {
        switch (script.kind) {
            case paperclip_interim_2.InterimScriptExpressionKind.String:
                return (0, utils_1.addBuffer)([JSON.stringify(script.value)]);
            case paperclip_interim_2.InterimScriptExpressionKind.Reference:
                return (0, utils_1.addBuffer)([prop(script.name)]);
            case paperclip_interim_2.InterimScriptExpressionKind.Number:
                return (0, utils_1.addBuffer)([String(script.value)]);
            case paperclip_interim_2.InterimScriptExpressionKind.Not:
                return (0, utils_1.addBuffer)(["!", compileScript(script.expression)]);
            case paperclip_interim_2.InterimScriptExpressionKind.Group: {
                return (0, utils_1.addBuffer)(["(", compileScript(script.inner), ")"]);
            }
            case paperclip_interim_2.InterimScriptExpressionKind.Element:
                return compileElement(script.element);
            case paperclip_interim_2.InterimScriptExpressionKind.Conjunction: {
                return (0, utils_1.addBuffer)([
                    compileScript(script.left),
                    CONJ_MAP[script.operator],
                    compileScript(script.right)
                ]);
            }
            case paperclip_interim_2.InterimScriptExpressionKind.Boolean:
                return (0, utils_1.addBuffer)([String(script.value)]);
        }
    };
    var compileStaticAttributePart = function (part, outer) {
        var _a;
        return (0, utils_1.writeSourceNode)((_a = part.range) === null || _a === void 0 ? void 0 : _a.start, outer(false)((0, utils_1.addBuffer)([JSON.stringify(part.value)])));
    };
    var compileShorthandAttributePart = function (name, part, outer) { var _a; return (0, utils_1.writeSourceNode)((_a = part.range) === null || _a === void 0 ? void 0 : _a.start, outer(true)((0, utils_1.addBuffer)([prop(name)]))); };
    var compileText = function (text) {
        return (0, utils_1.addBuffer)([
            (0, utils_1.writeSourceNode)(text.range.start, (0, utils_1.addBuffer)([JSON.stringify(entities.decode(text.value))])),
            "\n"
        ]);
    };
    var compileSlot = function (slot) { return function (context) {
        return compileScript(slot.script)(context);
    }; };
    var compileChildren = function (children) { return function (context) {
        if (children.length === 0) {
            return (0, utils_1.addBuffer)(["null"])(context);
        }
        // context = addBuffer([`[\n`])(context);
        context = (0, utils_1.addBuffer)(["\n", utils_1.startBlock])(context);
        context = (0, utils_1.writeJoin)(children, ",\n", function (child) {
            switch (child.kind) {
                case paperclip_interim_1.InterimNodeKind.Element: {
                    return compileElement(child);
                }
                case paperclip_interim_1.InterimNodeKind.Text: {
                    return compileText(child);
                }
                case paperclip_interim_1.InterimNodeKind.Slot: {
                    return compileSlot(child);
                }
            }
        })(context);
        context = (0, utils_1.addBuffer)(["\n", utils_1.endBlock])(context);
        return context;
        // return addBuffer([endBlock, `]`])(context);
    }; };
    return function (module, filePath, config, targetOptions, includes) {
        var context = (0, utils_1.writeSourceNode)({ line: 1, column: 1, pos: 1 }, (0, utils_1.addBuffer)([
            imports,
            translateImports,
            (0, utils_1.writeJoin)(includes, "\n", function (include) { return (0, utils_1.addBuffer)(["import \"".concat(include, "\";")]); }, true),
            preflight,
            UTILS,
            "\n\n",
            translateExportedStyles,
            "\n\n",
            compileComponents,
            "\n\n"
        ]))((0, utils_1.createTranslateContext)(module, filePath, config, targetOptions));
        return context.buffer[0].toStringWithSourceMap();
    };
};
exports.codeCompiler = codeCompiler;
