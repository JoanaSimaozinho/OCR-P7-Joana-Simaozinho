"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.endBlock = exports.writeJoin = exports.writeSourceNode = exports.wrapSourceNode = exports.startBlock = exports.addBuffer = exports.arrayJoin = exports.getElementInstanceName = exports.classNameToStyleName = exports.strToClassName = exports.getPartClassName = exports.getComponentName = exports.getBaseComponentName = exports.pascalCase = exports.REV_PROP = exports.RENAME_PROPS = exports.createTranslateContext = void 0;
var lodash_1 = require("lodash");
var path = require("path");
var paperclip_1 = require("paperclip");
var source_map_1 = require("source-map");
var DEFAULT_TAG_NAME = "$$Default";
var createTranslateContext = function (module, filePath, config, targetOptions) { return ({
    module: module,
    filePath: filePath,
    config: config,
    buffer: [],
    targetOptions: targetOptions,
    depth: 0,
    isNewLine: true,
    indent: "  "
}); };
exports.createTranslateContext = createTranslateContext;
exports.RENAME_PROPS = {
    class: "className",
    autofocus: "autoFocus",
    autocomplete: "autoComplete",
    for: "htmlFor"
};
exports.REV_PROP = {
    className: "class",
    autoFocus: "autofocus",
    autoComplete: "autocomplete",
    htmlFor: "for"
};
var pascalCase = function (value) {
    var newValue = (0, lodash_1.camelCase)(value);
    return newValue.charAt(0).toUpperCase() + newValue.substr(1);
};
exports.pascalCase = pascalCase;
var getBaseComponentName = function (filePath) {
    return "Base".concat((0, exports.getComponentName)(filePath));
};
exports.getBaseComponentName = getBaseComponentName;
var getComponentName = function (filePath) {
    return (0, exports.pascalCase)("".concat(path
        .basename(filePath)
        .split(".")
        .shift(), "View"));
};
exports.getComponentName = getComponentName;
var getPartClassName = function (part, filePath) {
    return (0, exports.strToClassName)((0, paperclip_1.getAttributeStringValue)(paperclip_1.AS_ATTR_NAME, part), filePath);
};
exports.getPartClassName = getPartClassName;
var strToClassName = function (value, filePath) {
    var safeClassName = value.replace(/[^\w_$]/g, "");
    if (safeClassName === "default") {
        safeClassName = (0, exports.getComponentName)(filePath);
    }
    if (!isNaN(Number(safeClassName.charAt(0)))) {
        safeClassName = "_" + safeClassName;
    }
    return safeClassName;
};
exports.strToClassName = strToClassName;
var classNameToStyleName = function (value) {
    return value.charAt(0).toLowerCase() + value.substr(1);
};
exports.classNameToStyleName = classNameToStyleName;
var getElementInstanceName = function (tagName, innerTagName, context) {
    var imp = context.module.imports.find(function (imp) { return imp.namespace === tagName; });
    if (!imp) {
        if (tagName === "default") {
            return DEFAULT_TAG_NAME;
        }
        return tagName;
    }
    return ("_" +
        (0, lodash_1.camelCase)(imp.publicScopeId) +
        (innerTagName ? "_" + innerTagName : ""));
};
exports.getElementInstanceName = getElementInstanceName;
var arrayJoin = function (buffer, sep) {
    return buffer.reduce(function (ary, part, index, buffer) {
        ary.push(part);
        if (index !== buffer.length - 1) {
            ary.push(sep);
        }
        return ary;
    }, []);
};
exports.arrayJoin = arrayJoin;
var addBuffer = function (buffer) { return function (context) {
    return buffer.reduce(function (context, part) {
        if (!part) {
            return context;
        }
        if (typeof part === "function") {
            return part(context) || [];
        }
        return __assign(__assign({}, context), { buffer: __spreadArray(__spreadArray([], context.buffer, true), [
                context.isNewLine ? context.indent.repeat(context.depth) : "",
                part
            ], false), isNewLine: typeof part === "string" && part.lastIndexOf("\n") === part.length - 1 });
    }, context);
}; };
exports.addBuffer = addBuffer;
var startBlock = function (context) {
    return __assign(__assign({}, context), { depth: context.depth + 1 });
};
exports.startBlock = startBlock;
var wrapSourceNode = function (pos, bufferStart, context) {
    return __assign(__assign({}, context), { buffer: __spreadArray(__spreadArray([], context.buffer.slice(0, bufferStart), true), [
            new source_map_1.SourceNode(pos.line, pos.column, context.filePath, __spreadArray([], context.buffer.slice(bufferStart), true))
        ], false) });
};
exports.wrapSourceNode = wrapSourceNode;
var writeSourceNode = function (pos, write) { return function (context) {
    var bufferStart = context.buffer.length;
    if (!pos) {
        return context;
    }
    return (0, exports.wrapSourceNode)(pos, bufferStart, write(context));
}; };
exports.writeSourceNode = writeSourceNode;
var writeJoin = function (items, join, write, trailing) {
    if (trailing === void 0) { trailing = false; }
    return function (context) {
        return items.reduce(function (context, item, index, items) {
            context = write(item)(context);
            if (index < items.length - 1 || trailing) {
                context = (0, exports.addBuffer)([join])(context);
            }
            return context;
        }, context);
    };
};
exports.writeJoin = writeJoin;
var endBlock = function (context) {
    return __assign(__assign({}, context), { depth: context.depth - 1 });
};
exports.endBlock = endBlock;
