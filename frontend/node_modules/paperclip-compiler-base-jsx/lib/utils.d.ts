import { Element } from "paperclip";
import { InterimModule } from "paperclip-interim";
import { CompilerOptions, PaperclipConfig, StringPosition } from "paperclip-utils";
export declare type Context = {
    module: InterimModule;
    config: PaperclipConfig;
    filePath: string;
    buffer: any[];
    depth: number;
    isNewLine: boolean;
    targetOptions: CompilerOptions;
    indent: string;
};
export declare const createTranslateContext: (module: InterimModule, filePath: string, config: PaperclipConfig, targetOptions: CompilerOptions) => Context;
export declare const RENAME_PROPS: {
    class: string;
    autofocus: string;
    autocomplete: string;
    for: string;
};
export declare const REV_PROP: {
    className: string;
    autoFocus: string;
    autoComplete: string;
    htmlFor: string;
};
export declare const pascalCase: (value: string) => string;
export declare const getBaseComponentName: (filePath: string) => string;
export declare const getComponentName: (filePath: string) => string;
export declare const getPartClassName: (part: Element, filePath: string) => string;
export declare const strToClassName: (value: string, filePath: string) => string;
export declare const classNameToStyleName: (value: string) => string;
export declare const getElementInstanceName: (tagName: string, innerTagName: string, context: Context) => string;
export declare const arrayJoin: (buffer: any[], sep: string) => any;
export declare const addBuffer: (buffer: any[]) => (context: Context) => Context;
export declare const startBlock: (context: Context) => {
    depth: number;
    module: InterimModule;
    config: PaperclipConfig;
    filePath: string;
    buffer: any[];
    isNewLine: boolean;
    targetOptions: CompilerOptions;
    indent: string;
};
export declare const wrapSourceNode: (pos: StringPosition, bufferStart: number, context: Context) => {
    buffer: any[];
    module: InterimModule;
    config: PaperclipConfig;
    filePath: string;
    depth: number;
    isNewLine: boolean;
    targetOptions: CompilerOptions;
    indent: string;
};
export declare type ContextWriter = (context: Context) => Context;
export declare const writeSourceNode: (pos: StringPosition | undefined, write: ContextWriter) => (context: Context) => Context;
export declare const writeJoin: <TItem>(items: TItem[], join: string, write: (item: TItem) => ContextWriter, trailing?: boolean) => (context: Context) => Context;
export declare const endBlock: (context: Context) => {
    depth: number;
    module: InterimModule;
    config: PaperclipConfig;
    filePath: string;
    buffer: any[];
    isNewLine: boolean;
    targetOptions: CompilerOptions;
    indent: string;
};
